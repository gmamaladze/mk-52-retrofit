

var ПЗУ = {
    ИК1302: {
        команды: [
            0x00204E4E, 0x00117360, 0x00114840, 0x01040240,
            0x00164040, 0x001B3240, 0x00064640, 0x015B4013,
            0x00D93130, 0x00001040, 0x01A52014, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00C12040,
            0x00D0536D, 0x00517740, 0x00B43130, 0x00B22223,
            0x00C15340, 0x00FD2040, 0x002D1D1D, 0x0008403B,
            0x00092140, 0x00094061, 0x000A2140, 0x00082140,
            0x000D7076, 0x010D400D, 0x000A403B, 0x00056D40,
            0x00100259, 0x010B1340, 0x00242044, 0x010B7840,
            0x00064002, 0x01FF2008, 0x0008565A, 0x0126403F,
            0x016C400D, 0x00C12077, 0x00517740, 0x00517740,
            0x00083240, 0x010C400D, 0x01FF200A, 0x010B3568,
            0x00117B5A, 0x0021206D, 0x01222034, 0x01015C5B,
            0x01D03454, 0x00005E5D, 0x010E400D, 0x010E0044,
            0x00F44E40, 0x009A206D, 0x00F44E5A, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00C11D1D,
            0x00063333, 0x010B403B, 0x01344043, 0x00096A6A,
            0x000A4443, 0x00792120, 0x01D32047, 0x00081E1E,
            0x01AF1140, 0x00AB1D1D, 0x0039324C, 0x000B324C,
            0x0008326D, 0x000D404C, 0x00854D40, 0x00134040,
            0x0009404C, 0x006D7770, 0x006D7240, 0x01001640,
            0x00A54C7E, 0x00F44E40, 0x01536900, 0x000A580E,
            0x003C5262, 0x0005716D, 0x013C4013, 0x00104070,
            0x00056F6D, 0x00A62070, 0x00106F40, 0x01056F40,
            0x001F3E3D, 0x0028595A, 0x001E2223, 0x00064B40,
            0x00524A40, 0x00692120, 0x001B4940, 0x00093240,
            0x011F0140, 0x00154840, 0x00062423, 0x00062423,
            0x01057340, 0x015E400D, 0x00095828, 0x00092223,
            0x00992F40, 0x00982F40, 0x00622040, 0x005D5820,
            0x00740F40, 0x00B81C20, 0x00D05373, 0x005B205C,
            0x006D2062, 0x0133200A, 0x010B7D62, 0x00A52120,
            0x01054072, 0x01494013, 0x01040540, 0x00217362,
            0x013D6A40, 0x00067840, 0x01AB6C6D, 0x01332014,
            0x000E7C6C, 0x00050B3F, 0x00C15340, 0x00950853,
            0x00E0417A, 0x00E04240, 0x00532120, 0x00365562,
            0x008F1E20, 0x013D1740, 0x004C2120, 0x0170406A,
            0x00C05340, 0x00061D1D, 0x00814545, 0x00063333,
            0x00061E1E, 0x00091E1E, 0x00900720, 0x01514078,
            0x00081D1D, 0x01622206, 0x001E4545, 0x00114060,
            0x000B2E40, 0x000F2D40, 0x010E1F40, 0x000D7677,
            0x00D33C40, 0x01D32032, 0x00116E60, 0x011D3440,
            0x00FF7440, 0x00073240, 0x001B430A, 0x01D32047,
            0x00113434, 0x001E6E40, 0x00D33C40, 0x00937540,
            0x00D01E20, 0x00043277, 0x00CA4020, 0x00107F54,
            0x00212068, 0x000B7840, 0x017C400C, 0x00056F6D,
            0x01470C40, 0x01716B62, 0x006B2120, 0x00332120,
            0x006D204C, 0x00E67362, 0x010D0940, 0x00062423,
            0x001A3A3A, 0x018F406F, 0x0151334C, 0x010D1716,
            0x01D35340, 0x00D24061, 0x00CA6554, 0x00104064,
            0x00512223, 0x00782120, 0x00263130, 0x001E3434,
            0x00193838, 0x00183939, 0x000D6654, 0x010D7A40,
            0x010E1740, 0x00057340, 0x00B86140, 0x00045263,
            0x00122773, 0x008F5373, 0x002E5150, 0x0151404C,
            0x001E3737, 0x00894E40, 0x001E3636, 0x006D563D,
            0x00E07A41, 0x00E12973, 0x00082640, 0x00062540,
            0x00D87967, 0x0005565A, 0x0005286C, 0x00762041,
            0x00952040, 0x008F1D1D, 0x01D35340, 0x008F2040,
            0x00CC4F4F, 0x00114060, 0x00054040, 0x001E3434,
            0x01047340, 0x011E3434, 0x00C62C2B, 0x00C53130,
            0x003E1D1D, 0x01041740, 0x001E3535, 0x00D35353,
            0x00DE4077, 0x00E24057, 0x00064E68, 0x01E53812,
            0x00D84067, 0x00064069, 0x000A402A, 0x00EF202A,
            0x01015C5B, 0x00090F40, 0x00005E5D, 0x010B3613,
            0x00144740, 0x01176806, 0x000A5A5A, 0x01D3200D
        ],
        синхропрограммы: [
            0x00, 0x00, 0x00, 0x10, 0x03, 0x1D, 0x00, 0x07, 0x1E,
            0x10, 0x03, 0x1C, 0x0B, 0x07, 0x0C, 0x1E, 0x00, 0x00,
            0x15, 0x18, 0x09, 0x16, 0x18, 0x09, 0x16, 0x18, 0x24,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x03, 0x0E, 0x1E, 0x33, 0x00, 0x00, 0x00, 0x00,
            0x23, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x2C, 0x00, 0x01,
            0x11, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0E, 0x1A,
            0x0F, 0x0E, 0x0D, 0x19, 0x03, 0x2F, 0x0E, 0x0D, 0x08,
            0x1C, 0x0C, 0x0D, 0x01, 0x00, 0x00, 0x03, 0x24, 0x0F,
            0x1C, 0x0C, 0x2F, 0x09, 0x1E, 0x34, 0x0E, 0x1E, 0x0C,
            0x06, 0x0A, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F,
            0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x26, 0x06,
            0x35, 0x34, 0x0D, 0x24, 0x1E, 0x1A, 0x09, 0x0C, 0x0F,
            0x3D, 0x00, 0x00, 0x1C, 0x03, 0x0E, 0x0A, 0x0F, 0x06,
            0x3D, 0x00, 0x0E, 0x3F, 0x03, 0x01, 0x00, 0x00, 0x0E,
            0x3F, 0x33, 0x0D, 0x01, 0x08, 0x00, 0x01, 0x08, 0x04,
            0x06, 0x03, 0x0E, 0x2B, 0x3A, 0x09, 0x12, 0x1E, 0x33,
            0x35, 0x03, 0x07, 0x0C, 0x1E, 0x1A, 0x00, 0x00, 0x00,
            0x35, 0x0C, 0x2F, 0x0E, 0x03, 0x01, 0x00, 0x00, 0x15,
            0x24, 0x1E, 0x1A, 0x23, 0x1D, 0x00, 0x00, 0x00, 0x00,
            0x09, 0x0C, 0x2F, 0x09, 0x03, 0x00, 0x24, 0x0C, 0x0F,
            0x3D, 0x09, 0x1E, 0x3F, 0x03, 0x07, 0x0B, 0x22, 0x03,
            0x07, 0x0B, 0x0D, 0x0C, 0x03, 0x0E, 0x1E, 0x3A, 0x2B,
            0x3C, 0x03, 0x00, 0x09, 0x34, 0x0E, 0x1E, 0x0C, 0x1E,
            0x2E, 0x01, 0x31, 0x2E, 0x01, 0x31, 0x00, 0x00, 0x00,
            0x2E, 0x30, 0x03, 0x2E, 0x30, 0x03, 0x00, 0x00, 0x00,
            0x2E, 0x2D, 0x00, 0x2E, 0x2D, 0x00, 0x00, 0x00, 0x00,
            0x3B, 0x04, 0x2F, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00,
            0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x13, 0x00, 0x01, 0x13, 0x00, 0x01, 0x13, 0x04,
            0x2E, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x2E, 0x00, 0x00,
            0x3D, 0x07, 0x10, 0x3F, 0x03, 0x00, 0x2C, 0x07, 0x1E,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x0F, 0x10, 0x03, 0x00, 0x1C, 0x03, 0x0F, 0x1D,
            0x03, 0x32, 0x00, 0x2B, 0x14, 0x00, 0x00, 0x08, 0x00,
            0x04, 0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x0C,
            0x0A, 0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x00,
            0x21, 0x15, 0x18, 0x21, 0x16, 0x18, 0x00, 0x17, 0x18,
            0x19, 0x1A, 0x18, 0x19, 0x16, 0x18, 0x09, 0x16, 0x18,
            0x2B, 0x15, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00,
            0x12, 0x1B, 0x0E, 0x0F, 0x1B, 0x0E, 0x23, 0x2B, 0x0A,
            0x2C, 0x18, 0x00, 0x2A, 0x18, 0x07, 0x0B, 0x03, 0x04,
            0x32, 0x14, 0x00, 0x32, 0x32, 0x11, 0x00, 0x08, 0x00,
            0x09, 0x0C, 0x15, 0x03, 0x00, 0x00, 0x06, 0x3C, 0x00,
            0x00, 0x2C, 0x00, 0x00, 0x2A, 0x00, 0x09, 0x16, 0x00,
            0x00, 0x00, 0x11, 0x00, 0x09, 0x16, 0x18, 0x09, 0x1E,
            0x00, 0x00, 0x07, 0x0A, 0x29, 0x3E, 0x33, 0x29, 0x00,
            0x0F, 0x0B, 0x0F, 0x10, 0x03, 0x08, 0x24, 0x03, 0x23,
            0x32, 0x01, 0x1D, 0x32, 0x08, 0x00, 0x32, 0x08, 0x32,
            0x32, 0x08, 0x23, 0x32, 0x08, 0x0F, 0x23, 0x23, 0x04,
            0x09, 0x1E, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x08,
            0x37, 0x00, 0x00, 0x37, 0x00, 0x00, 0x37, 0x00, 0x00,
            0x01, 0x31, 0x00, 0x01, 0x31, 0x00, 0x01, 0x31, 0x36,
            0x1A, 0x30, 0x0D, 0x00, 0x30, 0x0D, 0x00, 0x30, 0x0D,
            0x30, 0x03, 0x00, 0x30, 0x03, 0x00, 0x30, 0x03, 0x2B,
            0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00,
            0x0A, 0x30, 0x03, 0x00, 0x30, 0x03, 0x00, 0x30, 0x03,
            0x00, 0x01, 0x31, 0x00, 0x01, 0x31, 0x00, 0x01, 0x31,
            0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00,
            0x2C, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x09, 0x18, 0x00,
            0x07, 0x1E, 0x0F, 0x01, 0x00, 0x08, 0x1C, 0x0A, 0x08,
            0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x2B, 0x00,
            0x32, 0x00, 0x00, 0x32, 0x27, 0x36, 0x08, 0x09, 0x0C,
            0x1E, 0x02, 0x1D, 0x0F, 0x0C, 0x0F, 0x26, 0x07, 0x22,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x1D, 0x23, 0x23, 0x09, 0x23, 0x0C, 0x03, 0x23, 0x23,
            0x02, 0x35, 0x03, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x0C,
            0x01, 0x12, 0x00, 0x08, 0x00, 0x32, 0x0A, 0x00, 0x00,
            0x06, 0x18, 0x00, 0x17, 0x18, 0x00, 0x17, 0x18, 0x00,
            0x00, 0x01, 0x13, 0x00, 0x01, 0x13, 0x04, 0x01, 0x13,
            0x00, 0x00, 0x00, 0x09, 0x15, 0x18, 0x00, 0x35, 0x03,
            0x0E, 0x03, 0x09, 0x0C, 0x1B, 0x1E, 0x0F, 0x1B, 0x08,
            0x00, 0x00, 0x1C, 0x03, 0x1E, 0x15, 0x02, 0x0C, 0x00,
            0x07, 0x1E, 0x10, 0x0F, 0x09, 0x32, 0x1E, 0x0F, 0x08,
            0x09, 0x1E, 0x1A, 0x18, 0x1D, 0x17, 0x03, 0x0F, 0x3D,
            0x07, 0x0B, 0x1A, 0x1D, 0x28, 0x00, 0x0E, 0x28, 0x08,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x09,
            0x00, 0x04, 0x2B, 0x23, 0x04, 0x08, 0x08, 0x00, 0x08,
            0x0E, 0x03, 0x00, 0x2B, 0x2F, 0x0D, 0x12, 0x03, 0x04,
            0x01, 0x08, 0x00, 0x01, 0x08, 0x00, 0x01, 0x08, 0x04,
            0x0F, 0x1D, 0x2F, 0x0E, 0x03, 0x23, 0x07, 0x1E, 0x0D,
            0x0F, 0x12, 0x00, 0x23, 0x24, 0x1E, 0x23, 0x0F, 0x04,
            0x26, 0x12, 0x15, 0x03, 0x12, 0x04, 0x24, 0x2F, 0x0F,
            0x12, 0x04, 0x01, 0x0F, 0x07, 0x1E, 0x0F, 0x00, 0x01,
            0x0E, 0x0F, 0x20, 0x05, 0x00, 0x07, 0x12, 0x0E, 0x08,
            0x1E, 0x00, 0x10, 0x03, 0x0F, 0x04, 0x00, 0x00, 0x00,
            0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x17, 0x0D,
            0x00, 0x00, 0x00, 0x0A, 0x1A, 0x18, 0x00, 0x17, 0x03,
            0x32, 0x09, 0x0F, 0x32, 0x07, 0x0C, 0x0C, 0x1A, 0x0F,
            0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x00, 0x00,
            0x0E, 0x1E, 0x15, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02,
            0x00, 0x0E, 0x08, 0x0E, 0x1D, 0x23, 0x1E, 0x3A, 0x3A,
            0x1D, 0x04, 0x15, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x3A,
            0x00, 0x00, 0x3A, 0x00, 0x0D, 0x0E, 0x03, 0x0F, 0x00,
            0x3B, 0x3C, 0x2F, 0x37, 0x3C, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x02, 0x24, 0x1E,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x0B, 0x22, 0x03, 0x04,
            0x00, 0x00, 0x39, 0x04, 0x25, 0x08, 0x03, 0x07, 0x0F,
            0x12, 0x2C, 0x00, 0x2B, 0x2A, 0x26, 0x0D, 0x07, 0x0F,
            0x04, 0x0B, 0x08, 0x01, 0x10, 0x0D, 0x09, 0x00, 0x00,
            0x00, 0x01, 0x08, 0x04, 0x01, 0x08, 0x23, 0x01, 0x08,
            0x00, 0x00, 0x1B, 0x00, 0x00, 0x1B, 0x1F, 0x0E, 0x1B,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x1B, 0x00,
            0x00, 0x00, 0x01, 0x0F, 0x0D, 0x01, 0x09, 0x1E, 0x2B,
            0x00, 0x23, 0x1A, 0x07, 0x1E, 0x0C, 0x0F, 0x00, 0x00,
            0x1E, 0x12, 0x00, 0x00, 0x12, 0x00, 0x00, 0x12, 0x1A,
            0x1E, 0x00, 0x10, 0x0F, 0x24, 0x1E, 0x34, 0x1D, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x2F, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x09, 0x15,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x28,
            0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x09, 0x0C, 0x23,
            0x24, 0x0C, 0x1E, 0x0F, 0x00, 0x07, 0x03, 0x0F, 0x00,
            0x00, 0x00, 0x01, 0x0F, 0x07, 0x0B, 0x0F, 0x25, 0x0F,
            0x0F, 0x04, 0x00, 0x00, 0x00, 0x12, 0x09, 0x0C, 0x12,
            0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 0x0C,
            0x03, 0x00, 0x00, 0x00, 0x04, 0x32, 0x24, 0x0F, 0x23,
            0x0E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1E, 0x1A,
            0x07, 0x0B, 0x0F, 0x07, 0x0C, 0x1E, 0x1A, 0x0F, 0x00,
            0x0E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08,
            0x12, 0x00, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x09,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0B,
            0x00, 0x00, 0x12, 0x00, 0x00, 0x12, 0x04, 0x0C, 0x12,
            0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x08, 0x36, 0x00,
            0x02, 0x0D, 0x00, 0x01, 0x0F, 0x0D, 0x00, 0x0E, 0x1E,
            0x1E, 0x00, 0x10, 0x0F, 0x07, 0x0B, 0x34, 0x0F, 0x1D,
            0x1D, 0x04, 0x08, 0x36, 0x00, 0x08, 0x12, 0x00, 0x00,
            0x03, 0x1E, 0x0F, 0x26, 0x0A, 0x02, 0x26, 0x3E, 0x08
        ],
        микрокоманды: [
            0x0000000, 0x0800001, 0x0A00820, 0x0040020,
            0x0A03120, 0x0203081, 0x0A00181, 0x0803800,
            0x0818001, 0x0800400, 0x0A00089, 0x0A03C20,
            0x0800820, 0x0080020, 0x0800120, 0x1400020,
            0x0800081, 0x0210801, 0x0040000, 0x0058001,
            0x0808001, 0x0A03081, 0x0A01081, 0x0A01181,
            0x0040090, 0x0800401, 0x0A00081, 0x0040001,
            0x0800801, 0x1000000, 0x0800100, 0x1200801,
            0x0013C01, 0x0800008, 0x0A00088, 0x0010200,
            0x0800040, 0x0800280, 0x1801200, 0x1000208,
            0x0080001, 0x0A00082, 0x0A01008, 0x1000001,
            0x0A00808, 0x0900001, 0x8010004, 0x0080820,
            0x0800002, 0x0140002, 0x0008000, 0x0A00090,
            0x0A00220, 0x0801001, 0x1203200, 0x4800001,
            0x0011801, 0x1008001, 0x0A04020, 0x4800801,
            0x0840801, 0x0840020, 0x0013081, 0x0010801,
            0x0818180, 0x0800180, 0x0A00081, 0x0800001
        ]
    },
    ИК1303: {
        команды: [
            0x00386050, 0x005B3F3E, 0x000F5970, 0x00152470,
            0x000C3D50, 0x0011312F, 0x005B4544, 0x00165050,
            0x000C3404, 0x005B3F3E, 0x00D40450, 0x00162424,
            0x000C4962, 0x01FB5250, 0x000D4924, 0x01BB2222,
            0x00155050, 0x010F5247, 0x00182525, 0x00080505,
            0x000E041E, 0x00123433, 0x007F6425, 0x007F0D25,
            0x01650950, 0x01176553, 0x007E2432, 0x00087150,
            0x007E2455, 0x00135076, 0x00085977, 0x005B4544,
            0x000C2E26, 0x00310D2E, 0x00100E35, 0x00316B47,
            0x01381250, 0x0011302E, 0x01385F50, 0x00050250,
            0x011C0101, 0x00195050, 0x00382C2C, 0x016F2222,
            0x013A2222, 0x002F6B56, 0x00093D6C, 0x00F04D50,
            0x000C1750, 0x00074A50, 0x01B45047, 0x003C2020,
            0x01AA2B6A, 0x00123432, 0x001D4933, 0x0113500C,
            0x00052556, 0x00087C50, 0x01130000, 0x00142B2B,
            0x004A1D50, 0x006E5756, 0x00496050, 0x00E57D58,
            0x011E5D22, 0x01F35F50, 0x00EA0505, 0x001C7A50,
            0x01080B50, 0x0054244B, 0x000C4050, 0x002A2121,
            0x00135C5C, 0x000A4650, 0x00152504, 0x009D2B60,
            0x00064350, 0x00192020, 0x00292C2C, 0x01235C50,
            0x006D3C3C, 0x0031017D, 0x00092D2D, 0x004E2D2D,
            0x01596A7E, 0x00E3396E, 0x006E3654, 0x016E6E47,
            0x00534950, 0x00EE2062, 0x0016226E, 0x00660525,
            0x00135C5C, 0x000A4241, 0x00383B3B, 0x000C7277,
            0x00360404, 0x00042020, 0x00100A2E, 0x00155050,
            0x00532404, 0x0004642B, 0x01843C47, 0x01A35047,
            0x01847250, 0x015C112F, 0x00080434, 0x00152F23,
            0x00080505, 0x00906047, 0x0113150C, 0x006D2224,
            0x00747250, 0x000C632B, 0x00AD672B, 0x000A612E,
            0x01B97463, 0x00417374, 0x00BD0658, 0x00EA2450,
            0x00087166, 0x01BD3950, 0x001A2E50, 0x00BD6047,
            0x00175079, 0x005E6035, 0x000A3847, 0x01067F47,
            0x008C5251, 0x0013612E, 0x0087602E, 0x005B3F3E,
            0x00DC2121, 0x00177374, 0x00182525, 0x00286050,
            0x00064F4E, 0x000C5251, 0x006E2926, 0x008F602F,
            0x008C502A, 0x00172928, 0x00814F4E, 0x003F534B,
            0x000F075B, 0x00082525, 0x01E85047, 0x00790505,
            0x00152F23, 0x0017506A, 0x00095047, 0x00082525,
            0x00E63A62, 0x00DA0B47, 0x01174150, 0x00182525,
            0x00090450, 0x01175B50, 0x00094850, 0x001B2F50,
            0x00806047, 0x000A3720, 0x0010382F, 0x002C0505,
            0x009B5021, 0x00160505, 0x01ED3A50, 0x00040505,
            0x00082525, 0x01080F50, 0x01B35047, 0x000D3D4C,
            0x00180404, 0x01C03A50, 0x00E20421, 0x00287B50,
            0x00097F26, 0x0013612E, 0x01B6112F, 0x00322425,
            0x01B81847, 0x00BA714B, 0x00182450, 0x00080505,
            0x00182525, 0x004F1D24, 0x00736F5C, 0x00A67569,
            0x00AD2726, 0x01BE5022, 0x000A5E04, 0x00173A62,
            0x00CB752E, 0x00B11E25, 0x00CB0953, 0x00085068,
            0x002B2020, 0x01984150, 0x00C77C04, 0x00DA0950,
            0x00160404, 0x00F56040, 0x00DE0450, 0x01CB1160,
            0x00CF4950, 0x000A4747, 0x001F210B, 0x00145050,
            0x01171050, 0x00052075, 0x001D3D37, 0x00365555,
            0x00130101, 0x01D57424, 0x00D66047, 0x01C47850,
            0x004D2C2C, 0x01174150, 0x00174847, 0x00C90350,
            0x000A2760, 0x0019502E, 0x00D72C2C, 0x01174850,
            0x006C224B, 0x000A495B, 0x00100E35, 0x00312104,
            0x01C00850, 0x00115A2F, 0x00EA0505, 0x00080574,
            0x00152F23, 0x005C6050, 0x01C94122, 0x01A42222,
            0x00DF2847, 0x00C9202E, 0x00A76047, 0x0117502F,
            0x002E2020, 0x01205048, 0x00F8606D, 0x002D604C,
            0x00443A62, 0x000D3D2E, 0x015C3950, 0x01625022,
            0x006E136E, 0x0031602E, 0x01085D1A, 0x010F6F50,
            0x0017506A, 0x00FB5020, 0x000A3C47, 0x00174D50
        ],
        синхропрограммы: [
            0x2C, 0x23, 0x00, 0x2C, 0x23, 0x00, 0x2C, 0x23, 0x30,
            0x31, 0x32, 0x00, 0x31, 0x32, 0x12, 0x31, 0x32, 0x30,
            0x00, 0x00, 0x00, 0x11, 0x23, 0x00, 0x1F, 0x06, 0x00,
            0x31, 0x00, 0x1C, 0x31, 0x00, 0x00, 0x31, 0x08, 0x1D,
            0x2C, 0x02, 0x0E, 0x2C, 0x02, 0x01, 0x2C, 0x02, 0x08,
            0x08, 0x3A, 0x00, 0x00, 0x3A, 0x01, 0x05, 0x3A, 0x11,
            0x18, 0x0A, 0x2B, 0x00, 0x01, 0x33, 0x02, 0x24, 0x25,
            0x37, 0x3A, 0x18, 0x31, 0x3A, 0x1F, 0x31, 0x3A, 0x3D,
            0x37, 0x02, 0x06, 0x31, 0x02, 0x12, 0x31, 0x10, 0x19,
            0x39, 0x02, 0x26, 0x33, 0x09, 0x08, 0x19, 0x19, 0x08,
            0x01, 0x14, 0x0C, 0x00, 0x00, 0x00, 0x1B, 0x06, 0x01,
            0x26, 0x00, 0x21, 0x12, 0x14, 0x24, 0x06, 0x12, 0x00,
            0x39, 0x00, 0x21, 0x08, 0x22, 0x00, 0x10, 0x14, 0x00,
            0x20, 0x00, 0x00, 0x39, 0x02, 0x00, 0x06, 0x25, 0x25,
            0x19, 0x02, 0x16, 0x09, 0x11, 0x19, 0x16, 0x11, 0x13,
            0x18, 0x08, 0x10, 0x18, 0x00, 0x01, 0x1F, 0x06, 0x12,
            0x1A, 0x12, 0x2E, 0x19, 0x02, 0x00, 0x33, 0x38, 0x00,
            0x0D, 0x06, 0x3B, 0x13, 0x0A, 0x02, 0x00, 0x27, 0x00,
            0x00, 0x00, 0x33, 0x13, 0x3C, 0x00, 0x11, 0x14, 0x04,
            0x11, 0x1D, 0x34, 0x13, 0x01, 0x00, 0x14, 0x27, 0x00,
            0x2C, 0x10, 0x21, 0x2C, 0x02, 0x33, 0x00, 0x00, 0x00,
            0x37, 0x12, 0x2A, 0x31, 0x02, 0x00, 0x12, 0x06, 0x09,
            0x37, 0x12, 0x2A, 0x31, 0x14, 0x0C, 0x00, 0x00, 0x00,
            0x39, 0x0D, 0x12, 0x10, 0x0F, 0x00, 0x00, 0x27, 0x03,
            0x37, 0x12, 0x0C, 0x31, 0x05, 0x00, 0x31, 0x00, 0x00,
            0x37, 0x20, 0x0A, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x11, 0x13, 0x0E, 0x01, 0x0D, 0x11, 0x05, 0x25, 0x24,
            0x0A, 0x24, 0x0C, 0x08, 0x0D, 0x21, 0x00, 0x00, 0x00,
            0x37, 0x06, 0x3A, 0x31, 0x05, 0x02, 0x0A, 0x1D, 0x16,
            0x38, 0x14, 0x0C, 0x00, 0x08, 0x06, 0x20, 0x1B, 0x34,
            0x0E, 0x02, 0x06, 0x00, 0x02, 0x1F, 0x19, 0x20, 0x08,
            0x37, 0x10, 0x21, 0x31, 0x12, 0x0C, 0x00, 0x00, 0x00,
            0x01, 0x2D, 0x30, 0x01, 0x2D, 0x00, 0x01, 0x2D, 0x30,
            0x33, 0x34, 0x06, 0x01, 0x18, 0x00, 0x01, 0x18, 0x08,
            0x31, 0x20, 0x34, 0x31, 0x20, 0x05, 0x31, 0x20, 0x08,
            0x1F, 0x3A, 0x20, 0x14, 0x3A, 0x20, 0x0C, 0x00, 0x20,
            0x0A, 0x20, 0x06, 0x30, 0x1F, 0x0C, 0x00, 0x20, 0x00,
            0x35, 0x20, 0x05, 0x34, 0x14, 0x09, 0x30, 0x20, 0x11,
            0x08, 0x18, 0x18, 0x08, 0x18, 0x18, 0x08, 0x33, 0x20,
            0x04, 0x16, 0x06, 0x36, 0x06, 0x0C, 0x01, 0x03, 0x00,
            0x2F, 0x08, 0x18, 0x1C, 0x00, 0x18, 0x00, 0x20, 0x18,
            0x00, 0x18, 0x14, 0x35, 0x1D, 0x06, 0x14, 0x00, 0x3B,
            0x06, 0x20, 0x05, 0x34, 0x14, 0x09, 0x19, 0x00, 0x21,
            0x05, 0x3A, 0x3A, 0x06, 0x3A, 0x3A, 0x05, 0x3A, 0x3A,
            0x01, 0x23, 0x00, 0x01, 0x23, 0x00, 0x01, 0x23, 0x08,
            0x01, 0x32, 0x02, 0x01, 0x32, 0x02, 0x01, 0x32, 0x02,
            0x15, 0x04, 0x03, 0x15, 0x17, 0x03, 0x15, 0x17, 0x03,
            0x07, 0x2B, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17, 0x03,
            0x04, 0x1E, 0x06, 0x1E, 0x3F, 0x0E, 0x09, 0x11, 0x13,
            0x0F, 0x29, 0x05, 0x09, 0x28, 0x09, 0x09, 0x09, 0x01,
            0x08, 0x0B, 0x0B, 0x1B, 0x0B, 0x0B, 0x1E, 0x0B, 0x00,
            0x08, 0x0B, 0x0B, 0x0E, 0x0B, 0x0B, 0x1A, 0x0B, 0x00,
            0x11, 0x1D, 0x06, 0x08, 0x10, 0x04, 0x02, 0x06, 0x2F,
            0x1F, 0x1C, 0x2F, 0x00, 0x1C, 0x1C, 0x09, 0x18, 0x11,
            0x0B, 0x0C, 0x0C, 0x0B, 0x02, 0x30, 0x00, 0x00, 0x00,
            0x25, 0x1C, 0x04, 0x01, 0x1C, 0x1D, 0x1D, 0x06, 0x08,
            0x01, 0x30, 0x21, 0x3F, 0x2E, 0x11, 0x19, 0x25, 0x01,
            0x16, 0x00, 0x00, 0x03, 0x0C, 0x0A, 0x19, 0x0A, 0x19,
            0x0E, 0x16, 0x1B, 0x11, 0x1D, 0x10, 0x3C, 0x3A, 0x05,
            0x20, 0x08, 0x10, 0x06, 0x22, 0x19, 0x02, 0x22, 0x18,
            0x06, 0x0C, 0x01, 0x10, 0x00, 0x00, 0x00, 0x11, 0x13,
            0x0A, 0x2B, 0x03, 0x0A, 0x17, 0x03, 0x0A, 0x17, 0x03,
            0x12, 0x14, 0x06, 0x12, 0x02, 0x00, 0x0A, 0x02, 0x00,
            0x0A, 0x24, 0x0C, 0x00, 0x0A, 0x21, 0x06, 0x20, 0x18,
            0x0A, 0x21, 0x21, 0x35, 0x02, 0x08, 0x10, 0x02, 0x05,
            0x00, 0x12, 0x0F, 0x11, 0x24, 0x21, 0x35, 0x02, 0x05,
            0x06, 0x25, 0x0C, 0x06, 0x02, 0x12, 0x14, 0x02, 0x18,
            0x12, 0x20, 0x14, 0x00, 0x00, 0x21, 0x18, 0x12, 0x0B,
            0x0A, 0x24, 0x06, 0x00, 0x20, 0x08, 0x25, 0x02, 0x00,
            0x24, 0x02, 0x35, 0x18, 0x12, 0x14, 0x34, 0x00, 0x18,
            0x12, 0x14, 0x0C, 0x00, 0x0A, 0x21, 0x35, 0x02, 0x00,
            0x00, 0x26, 0x03, 0x06, 0x27, 0x03, 0x06, 0x27, 0x03,
            0x26, 0x03, 0x00, 0x27, 0x03, 0x00, 0x27, 0x03, 0x00,
            0x11, 0x04, 0x03, 0x00, 0x36, 0x03, 0x00, 0x36, 0x03,
            0x06, 0x04, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17, 0x03,
            0x0A, 0x20, 0x24, 0x25, 0x03, 0x06, 0x08, 0x02, 0x0B,
            0x12, 0x04, 0x16, 0x0A, 0x17, 0x03, 0x0A, 0x17, 0x03,
            0x07, 0x2B, 0x00, 0x07, 0x17, 0x00, 0x07, 0x17, 0x25,
            0x00, 0x07, 0x2B, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17,
            0x03, 0x36, 0x03, 0x11, 0x24, 0x1D, 0x24, 0x03, 0x06,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x15, 0x04, 0x03, 0x15, 0x17, 0x03, 0x15, 0x17,
            0x03, 0x12, 0x1D, 0x1D, 0x14, 0x06, 0x12, 0x06, 0x00,
            0x1C, 0x1C, 0x00, 0x1C, 0x2F, 0x00, 0x06, 0x20, 0x20,
            0x00, 0x0B, 0x02, 0x00, 0x0B, 0x02, 0x00, 0x36, 0x00,
            0x01, 0x18, 0x18, 0x01, 0x18, 0x18, 0x01, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x33, 0x00, 0x08, 0x18, 0x04, 0x28,
            0x1F, 0x0C, 0x08, 0x25, 0x06, 0x0E, 0x06, 0x00, 0x18,
            0x06, 0x0E, 0x00, 0x16, 0x16, 0x00, 0x1D, 0x20, 0x20,
            0x18, 0x07, 0x06, 0x35, 0x10, 0x34, 0x05, 0x09, 0x24,
            0x05, 0x09, 0x09, 0x09, 0x09, 0x01, 0x0D, 0x10, 0x09,
            0x08, 0x25, 0x33, 0x2E, 0x06, 0x1B, 0x06, 0x00, 0x13,
            0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x38,
            0x1D, 0x3D, 0x05, 0x1D, 0x3D, 0x05, 0x1D, 0x3D, 0x05,
            0x1D, 0x20, 0x1D, 0x00, 0x18, 0x00, 0x33, 0x34, 0x06,
            0x39, 0x3C, 0x21, 0x01, 0x3C, 0x01, 0x06, 0x1F, 0x19,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
            0x0A, 0x17, 0x03, 0x11, 0x13, 0x14, 0x00, 0x05, 0x35,
            0x00, 0x05, 0x34, 0x00, 0x00, 0x34, 0x00, 0x00, 0x34,
            0x38, 0x04, 0x02, 0x33, 0x00, 0x11, 0x04, 0x00, 0x00,
            0x0C, 0x00, 0x26, 0x33, 0x09, 0x09, 0x20, 0x08, 0x18,
            0x0F, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x05,
            0x30, 0x09, 0x20, 0x20, 0x06, 0x20, 0x21, 0x00, 0x00,
            0x0A, 0x3A, 0x10, 0x2B, 0x18, 0x38, 0x38, 0x0E, 0x02,
            0x16, 0x0C, 0x35, 0x05, 0x00, 0x00, 0x19, 0x30, 0x00,
            0x08, 0x1C, 0x18, 0x00, 0x1C, 0x00, 0x00, 0x05, 0x3A,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x20,
            0x1F, 0x0C, 0x08, 0x25, 0x06, 0x08, 0x00, 0x00, 0x34,
            0x06, 0x1C, 0x05, 0x25, 0x1C, 0x25, 0x1F, 0x18, 0x34,
            0x33, 0x20, 0x26, 0x0B, 0x02, 0x00, 0x34, 0x09, 0x09,
            0x00, 0x06, 0x36, 0x00, 0x00, 0x11, 0x24, 0x0B, 0x34,
            0x20, 0x20, 0x00, 0x00, 0x39, 0x02, 0x08, 0x1D, 0x00,
            0x00, 0x08, 0x00, 0x3E, 0x00, 0x00, 0x37, 0x08, 0x1D,
            0x00, 0x00, 0x20, 0x00, 0x35, 0x20, 0x05, 0x34, 0x34,
            0x12, 0x14, 0x24, 0x34, 0x2E, 0x30, 0x1F, 0x06, 0x08,
            0x01, 0x05, 0x30, 0x04, 0x30, 0x2E, 0x06, 0x0E, 0x00,
            0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x34, 0x00,
            0x0A, 0x06, 0x1B, 0x1F, 0x00, 0x00, 0x25, 0x00, 0x3B,
            0x25, 0x10, 0x06, 0x00, 0x00, 0x0A, 0x10, 0x07, 0x03,
            0x0A, 0x10, 0x01, 0x00, 0x00, 0x00, 0x16, 0x19, 0x35,
            0x06, 0x12, 0x10, 0x19, 0x10, 0x00, 0x00, 0x00, 0x3A,
            0x11, 0x06, 0x09, 0x35, 0x16, 0x10, 0x3E, 0x13, 0x0D,
            0x24, 0x3D, 0x10, 0x0E, 0x12, 0x33, 0x03, 0x06, 0x30,
            0x00, 0x26, 0x00, 0x00, 0x27, 0x00, 0x00, 0x3B, 0x08,
            0x06, 0x0C, 0x0C, 0x20, 0x0A, 0x06, 0x11, 0x14, 0x00,
            0x18, 0x24, 0x06, 0x0A, 0x10, 0x18, 0x11, 0x24, 0x18,
            0x10, 0x25, 0x05, 0x06, 0x3C, 0x05, 0x06, 0x00, 0x00,
            0x06, 0x0C, 0x0C, 0x00, 0x00, 0x12, 0x24, 0x1D, 0x1D
        ],
        микрокоманды: [
            0x0000000, 0x0800001, 0x0040020, 0x1440090,
            0x0A00081, 0x1000000, 0x1400020, 0x0800008,
            0x0A03180, 0x1002200, 0x0800400, 0x1418001,
            0x0080020, 0x0841020, 0x0203100, 0x0203088,
            0x0A00820, 0x0800120, 0x08001C0, 0x0810081,
            0x0A00089, 0x0800401, 0x0A010A0, 0x0A01081,
            0x0818001, 0x1A00220, 0x0201100, 0x0203420,
            0x0008000, 0x0801020, 0x0201420, 0x0801190,
            0x0040000, 0x0080820, 0x0800002, 0x0140002,
            0x0800100, 0x0A03C20, 0x0A00808, 0x0A01008,
            0x0200540, 0x0601209, 0x0083100, 0x0A03081,
            0x8800004, 0x0058001, 0x1001280, 0x1008001,
            0x1200209, 0x4018001, 0x0040002, 0x1000001,
            0x0010200, 0x0800840, 0x0A01181, 0x4018801,
            0x0A10181, 0x0800801, 0x0040001, 0x0011190,
            0x0858001, 0x0040020, 0x3200209, 0x08000C0,
            0x4000020, 0x0600081, 0x1000000, 0x1000180
        ]
    },
    ИК1306: {
        команды: [
            0x0070000, 0x0060040, 0x0076A2F, 0x00B4C00,
            0x0090000, 0x00B4D00, 0x0090000, 0x0055300,
            0x0090000, 0x00B5400, 0x0090000, 0x0054600,
            0x0061000, 0x00B4800, 0x0065657, 0x0057300,
            0x0090000, 0x0075655, 0x0071700, 0x0060040,
            0x0070000, 0x0070000, 0x0074444, 0x00C4545,
            0x0280058, 0x0682825, 0x08A0000, 0x0280059,
            0x0800058, 0x0800059, 0x04D5F5F, 0x0FB2F22,
            0x0FB2F21, 0x0F80000, 0x0FB2F20, 0x0940000,
            0x0B80059, 0x0B80058, 0x0830000, 0x03D4343,
            0x0075E5E, 0x0075B00, 0x0695900, 0x007002B,
            0x0070028, 0x0070003, 0x0070028, 0x0070052,
            0x0070015, 0x00C0037, 0x00F5C00, 0x0075C01,
            0x0075D5D, 0x007285F, 0x0DC585B, 0x00C005C,
            0x0680000, 0x0070A0A, 0x0075B59, 0x0070254,
            0x02A5F5F, 0x0075F5F, 0x00B0076, 0x0077700,
            0x00B0039, 0x0063A2A, 0x01B3B2A, 0x0682828,
            0x0680000, 0x0F05800, 0x00B003D, 0x04A0000,
            0x0053200, 0x0502800, 0x0054E00, 0x0560000,
            0x0530000, 0x00B0076, 0x0077700, 0x03E5F5F,
            0x0DC0058, 0x0050032, 0x0682828, 0x005002A,
            0x0682C2C, 0x0682828, 0x0050039, 0x0682828,
            0x0682C2C, 0x0CA0025, 0x0070013, 0x0070066,
            0x0070014, 0x0070066, 0x0070014, 0x0F6005F,
            0x00B3E00, 0x0065300, 0x00B4E00, 0x0065300,
            0x0063B58, 0x0052A00, 0x0070058, 0x0184343,
            0x0FC7576, 0x00A2828, 0x0052A00, 0x0065300,
            0x00C0000, 0x0180000, 0x0682F2F, 0x0053C00,
            0x0065300, 0x00C0000, 0x0182F2F, 0x0680000,
            0x007042E, 0x0051600, 0x07A0000, 0x0070447,
            0x00B164B, 0x0770000, 0x00C3119, 0x0180000,
            0x007005D, 0x0DC585F, 0x0830000, 0x0680000,
            0x0695E5E, 0x0830000, 0x0680000, 0x00A0009,
            0x00B0016, 0x00B0061, 0x0185A5A, 0x0075866,
            0x0F00900, 0x0840004, 0x0052F26, 0x068002F,
            0x0680027, 0x0056D00, 0x0180000, 0x0920000,
            0x0F00959, 0x0180000, 0x00A0000, 0x0B50015,
            0x0070011, 0x0070052, 0x0070066, 0x0070001,
            0x0070001, 0x0070066, 0x0070001, 0x0070066,
            0x0070001, 0x0070001, 0x0070066, 0x0070001,
            0x0070066, 0x0070002, 0x0070066, 0x0070001,
            0x0075D5D, 0x0070052, 0x0075D5D, 0x0075D5D,
            0x0590003, 0x00A5A00, 0x00B2A00, 0x01C7400,
            0x00B3F00, 0x0185E00, 0x00B7458, 0x0B2005F,
            0x0F00947, 0x0AE0000, 0x00B5E63, 0x0090000,
            0x0186B2C, 0x00C006E, 0x0180000, 0x0180001,
            0x0072828, 0x00B3000, 0x0680000, 0x00C3636,
            0x0C10000, 0x0F07259, 0x0A90000, 0x0C45F00,
            0x0073131, 0x0A95A5A, 0x0C45A5A, 0x0680000,
            0x00A0000, 0x0690059, 0x0CA2C00, 0x0DC5931,
            0x0DC596B, 0x08D0000, 0x00A5A5A, 0x007000E,
            0x0072E2E, 0x0074242, 0x0073334, 0x00B6265,
            0x0DB5E5E, 0x0070064, 0x007075F, 0x0075F51,
            0x00B1A03, 0x00F0051, 0x0D40068, 0x0075F5F,
            0x0070052, 0x0070065, 0x0CF0038, 0x0180067,
            0x00A4242, 0x005004E, 0x0070051, 0x0066000,
            0x0065300, 0x005004F, 0x0065300, 0x0064650,
            0x005004F, 0x0070050, 0x0070059, 0x0070052,
            0x01B353E, 0x005002A, 0x0070058, 0x007000E,
            0x0063B51, 0x005004E, 0x0075800, 0x0184343,
            0x00A4242, 0x0066000, 0x0063B00, 0x0070000,
            0x0075000, 0x0605259, 0x0837125, 0x0680000,
            0x0070023, 0x0070024, 0x0072F29, 0x0070041,
            0x1060040, 0x0074900, 0x0075F5F, 0x0094A4A
        ],
        синхропрограммы: [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x2C, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x13, 0x2B, 0x27,
            0x34, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x13, 0x2B, 0x27,
            0x29, 0x2A, 0x35, 0x29, 0x2B, 0x35, 0x29, 0x2B, 0x35,
            0x29, 0x12, 0x35, 0x29, 0x3F, 0x35, 0x29, 0x3F, 0x35,
            0x2E, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x2A, 0x02, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x12, 0x05, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x0E, 0x02, 0x00, 0x24, 0x02, 0x00, 0x24, 0x02, 0x00,
            0x30, 0x1D, 0x05, 0x2F, 0x1D, 0x00, 0x00, 0x1D, 0x00,
            0x22, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x0C, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x25, 0x00,
            0x31, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F,
            0x0E, 0x34, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00,
            0x18, 0x25, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x1B, 0x03, 0x39, 0x00, 0x00, 0x00, 0x14, 0x18, 0x00,
            0x36, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x37, 0x1E, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x06, 0x07, 0x01, 0x06, 0x07, 0x01, 0x06, 0x07,
            0x34, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x3E, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x01, 0x25, 0x00, 0x01, 0x25, 0x00, 0x24, 0x02, 0x00,
            0x03, 0x04, 0x02, 0x03, 0x04, 0x02, 0x24, 0x02, 0x00,
            0x01, 0x06, 0x07, 0x01, 0x06, 0x07, 0x24, 0x02, 0x00,
            0x01, 0x04, 0x08, 0x01, 0x04, 0x08, 0x24, 0x00, 0x1A,
            0x03, 0x06, 0x09, 0x03, 0x06, 0x09, 0x24, 0x00, 0x02,
            0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x24, 0x25, 0x00,
            0x03, 0x00, 0x38, 0x03, 0x00, 0x0B, 0x03, 0x25, 0x00,
            0x24, 0x25, 0x00, 0x24, 0x25, 0x0E, 0x05, 0x00, 0x00,
            0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x03, 0x25, 0x00,
            0x00, 0x00, 0x19, 0x05, 0x00, 0x19, 0x05, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x12,
            0x00, 0x21, 0x00, 0x00, 0x21, 0x24, 0x25, 0x03, 0x25,
            0x00, 0x0D, 0x02, 0x00, 0x0D, 0x02, 0x00, 0x0D, 0x02,
            0x00, 0x17, 0x00, 0x00, 0x17, 0x24, 0x05, 0x00, 0x00,
            0x24, 0x00, 0x05, 0x24, 0x00, 0x05, 0x24, 0x00, 0x05,
            0x24, 0x25, 0x00, 0x24, 0x25, 0x00, 0x24, 0x25, 0x00,
            0x13, 0x0A, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x28, 0x00,
            0x00, 0x03, 0x05, 0x00, 0x03, 0x05, 0x00, 0x03, 0x05,
            0x1B, 0x03, 0x00, 0x0B, 0x03, 0x0B, 0x00, 0x00, 0x00,
            0x2C, 0x02, 0x00, 0x24, 0x02, 0x00, 0x24, 0x02, 0x00,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
            0x00, 0x16, 0x00, 0x00, 0x16, 0x00, 0x00, 0x16, 0x00,
            0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x21,
            0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x24, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x12, 0x00,
            0x14, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00,
            0x24, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00,
            0x13, 0x0A, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x00, 0x00,
            0x1B, 0x18, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x13, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00,
            0x1B, 0x03, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x12, 0x14, 0x00,
            0x0E, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x05, 0x24, 0x02,
            0x03, 0x00, 0x25, 0x03, 0x00, 0x25, 0x03, 0x00, 0x25,
            0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20,
            0x00, 0x11, 0x05, 0x00, 0x11, 0x05, 0x00, 0x11, 0x05,
            0x00, 0x11, 0x25, 0x00, 0x11, 0x25, 0x00, 0x11, 0x25,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0E, 0x0F, 0x0F, 0x2A, 0x0F, 0x0F, 0x12, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1B, 0x1C, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x15, 0x00, 0x03, 0x15, 0x00, 0x03, 0x15, 0x00,
            0x1B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x00, 0x12, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x12, 0x12, 0x12, 0x12, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x23, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x23, 0x02, 0x00,
            0x26, 0x27, 0x00, 0x28, 0x27, 0x00, 0x28, 0x27, 0x00,
            0x00, 0x26, 0x27, 0x00, 0x28, 0x27, 0x00, 0x28, 0x27,
            0x29, 0x2A, 0x27, 0x29, 0x2B, 0x27, 0x29, 0x2B, 0x3A,
            0x0E, 0x12, 0x12, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00,
            0x0E, 0x12, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00,
            0x00, 0x00, 0x00, 0x25, 0x00, 0x0E, 0x0F, 0x0F, 0x0F,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x18, 0x00,
            0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x1D, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x1D, 0x00,
            0x1F, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x16, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x16, 0x05, 0x00, 0x16, 0x05, 0x00, 0x16, 0x05,
            0x00, 0x16, 0x02, 0x00, 0x16, 0x02, 0x00, 0x16, 0x02,
            0x03, 0x21, 0x02, 0x03, 0x21, 0x02, 0x03, 0x21, 0x02,
            0x18, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1B, 0x03, 0x0B, 0x00, 0x00, 0x00,
            0x03, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1B, 0x03, 0x3D, 0x00, 0x00, 0x00,
            0x24, 0x18, 0x03, 0x18, 0x05, 0x03, 0x18, 0x05, 0x00,
            0x03, 0x00, 0x32, 0x03, 0x00, 0x32, 0x03, 0x00, 0x32,
            0x24, 0x33, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x21, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
            0x00, 0x2C, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x00, 0x00,
            0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x13, 0x09, 0x00,
            0x00, 0x3B, 0x05, 0x00, 0x3B, 0x05, 0x00, 0x3B, 0x05,
            0x00, 0x0D, 0x05, 0x00, 0x0D, 0x05, 0x00, 0x0D, 0x05,
            0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
            0x1B, 0x18, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x17, 0x00, 0x00, 0x17, 0x0E, 0x05, 0x0D, 0x02,
            0x18, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
            0x13, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00, 0x09, 0x00,
            0x0E, 0x0F, 0x02, 0x24, 0x25, 0x00, 0x24, 0x25, 0x00,
            0x00, 0x00, 0x00, 0x29, 0x0F, 0x0F, 0x0F, 0x12, 0x00,
            0x00, 0x29, 0x12, 0x00, 0x29, 0x3F, 0x00, 0x13, 0x0F,
            0x00, 0x3D, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x3D, 0x00,
            0x1B, 0x03, 0x00, 0x0B, 0x03, 0x0B, 0x13, 0x39, 0x24,
            0x0E, 0x02, 0x00, 0x24, 0x02, 0x00, 0x13, 0x07, 0x00,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F
        ],
        микрокоманды: [
            0x0000000, 0x0800008, 0x0040020, 0x0800001,
            0x0800021, 0x0080020, 0x0A00028, 0x0040100,
            0x4000100, 0x0010100, 0x0A00101, 0x0201089,
            0x0213201, 0x0800004, 0x0800800, 0x0800820,
            0x0200088, 0x4810002, 0x0A00820, 0x0800400,
            0x0801000, 0x0100000, 0x8800004, 0x0008000,
            0x1400020, 0x0800005, 0x4000020, 0x0A00180,
            0x0100000, 0x4000001, 0x8241004, 0x0400000,
            0x0080001, 0x0040001, 0x0212801, 0x0200808,
            0x0800000, 0x0010020, 0x0A00808, 0x0040090,
            0x0A01008, 0x0800401, 0x0A00081, 0x0A01081,
            0x0803400, 0x0A01001, 0x0A11801, 0x0011001,
            0x0A10801, 0x0213801, 0x0098001, 0x0818001,
            0x0800420, 0x0880090, 0x0203C08, 0x0200809,
            0x0A00089, 0x0203090, 0x0840090, 0x0810002,
            0x0210801, 0x0210081, 0x0010000, 0x0200090,
            0x0210081, 0x0212801, 0x0A01020, 0x0A01020
        ]
    }
}

function Заполнить_ПЗУ() {
    ИК1302.ПЗУ_команд = ПЗУ.ИК1302.команды;
    ИК1302.ПЗУ_синхропрограмм = ПЗУ.ИК1302.синхропрограммы;
    ИК1302.ПЗУ_микрокоманд = ПЗУ.ИК1302.микрокоманды;
    ИК1303.ПЗУ_команд = ПЗУ.ИК1303.команды;
    ИК1303.ПЗУ_синхропрограмм = ПЗУ.ИК1303.синхропрограммы;
    ИК1303.ПЗУ_микрокоманд = ПЗУ.ИК1303.микрокоманды;
    if (расширенный) {
        ИК1306.ПЗУ_команд = ПЗУ.ИК1306.команды;
        ИК1306.ПЗУ_синхропрограмм = ПЗУ.ИК1306.синхропрограммы;
        ИК1306.ПЗУ_микрокоманд = ПЗУ.ИК1306.микрокоманды;
    }
}

var Мера_угла = 10;
var Индикатор = [], Индик_зпт = [], Индик_ст = [];

var ИР2_1, ИР2_2;
var ИК1302, ИК1303, ИК1306;

ИР2 = function () {
    this.M = [];
    for (var сч = 0; сч < 252; сч++) {
        this.M[сч] = 0;
    }
    this.вход = 0, this.выход = 0;
    this.микротакт = 0;
    this.Такт = function () {
        this.выход = this.M[this.микротакт];
        this.M[this.микротакт] = this.вход;
        this.микротакт++;
        if (this.микротакт > 251) this.микротакт = 0;
    }
}

var J = [
    0, 1, 2, 3, 4, 5,
    3, 4, 5, 3, 4, 5,
    3, 4, 5, 3, 4, 5,
    3, 4, 5, 3, 4, 5,
    6, 7, 8, 0, 1, 2,
    3, 4, 5, 6, 7, 8,
    0, 1, 2, 3, 4, 5
];

ИК13 = function () {
    this.ПЗУ_микрокоманд = [], this.ПЗУ_синхропрограмм = [], this.ПЗУ_команд = [];
    this.M = [], this.R = [], this.ST = [];
    for (var сч = 0; сч < 42; сч++)
        this.M[сч] = 0, this.R[сч] = 0, this.ST[сч] = 0;
    this.S = 0, this.S1 = 0;
    this.L = 0, this.T = 0, this.П = 0;
    this.микротакт = 0, this.микрокоманда = 0;
    this.вход = 0, this.выход = 0;
    this.АМК = 0, this.АСП = 0, this.АК = 0, this.МОД = 0;
    this.индик_зпт = [];
    this.клав_x = 0, this.клав_y = 0, this.запятая = 0;
    this.обн_индик = false;
    for (сч = 0; сч < 14; сч++)
        this.индик_зпт[сч] = false;
    this.Такт = function () {
        var сигнал_I = this.микротакт >>> 2;
        var сигнал_D = this.микротакт / 12 | 0;
        var сигнал_E = (this.микротакт >>> 2) % 3;
        if (this.микротакт == 0) {
            this.АК = this.R[36] + 16 * this.R[39];
            if ((this.ПЗУ_команд[this.АК] & 0xfc0000) == 0) this.T = 0;
        }
        var k = this.микротакт / 36 | 0;
        if (k < 3) this.АСП = this.ПЗУ_команд[this.АК] & 0xff;
        else if (k == 3) this.АСП = this.ПЗУ_команд[this.АК] >>> 8 & 0xff;
        else if (k == 4) {
            this.АСП = this.ПЗУ_команд[this.АК] >>> 16 & 0xff;
            if (this.АСП > 0x1f) {
                if (this.микротакт == 144) {
                    this.R[37] = this.АСП & 0xf;
                    this.R[40] = this.АСП >>> 4;
                }
                this.АСП = 0x5f;
            }
        }
        this.МОД = this.ПЗУ_команд[this.АК] >>> 24 & 0xff;
        this.АМК = this.ПЗУ_синхропрограмм[this.АСП * 9 + J[this.микротакт >>> 2]];
        this.АМК = this.АМК & 0x3f;
        if (this.АМК > 59) {
            this.АМК = (this.АМК - 60) * 2;
            if (this.L == 0) this.АМК++;
            this.АМК += 60;
        }
        this.микрокоманда = this.ПЗУ_микрокоманд[this.АМК];
        var альфа = 0, бета = 0, гамма = 0;
        switch (this.микрокоманда >>> 24 & 3) {
            case 2:
            case 3:
                if ((this.микротакт / 12 | 0) != this.клав_x - 1)
                    if (this.клав_y > 0)
                        this.S1 |= this.клав_y;
                break;
        }
        if ((this.микрокоманда & 1) > 0) альфа |= this.R[сигнал_I];
        if ((this.микрокоманда & 2) > 0) альфа |= this.M[сигнал_I];
        if ((this.микрокоманда & 4) > 0) альфа |= this.ST[сигнал_I];
        if ((this.микрокоманда & 8) > 0) альфа |= ~this.R[сигнал_I] & 0xf;
        if ((this.микрокоманда & 16) > 0) if (this.L == 0) альфа |= 0xa;
        if ((this.микрокоманда & 32) > 0) альфа |= this.S;
        if ((this.микрокоманда & 64) > 0) альфа |= 4;
        if ((this.микрокоманда >>> 7 & 16) > 0) бета |= 1;
        if ((this.микрокоманда >>> 7 & 8) > 0) бета |= 6;
        if ((this.микрокоманда >>> 7 & 4) > 0) бета |= this.S1;
        if ((this.микрокоманда >>> 7 & 2) > 0) бета |= ~this.S & 0xf;
        if ((this.микрокоманда >>> 7 & 1) > 0) бета |= this.S;
        if ((this.ПЗУ_команд[this.АК] & 0xfc0000) > 0) {
            if (this.клав_y == 0) this.T = 0;
        }
        else {
            this.обн_индик = true;
            if ((this.микротакт / 12 | 0) == this.клав_x - 1)
                if (this.клав_y > 0) {
                    this.S1 = this.клав_y;
                    this.T = 1;
                }
            if (сигнал_D >= 0 && сигнал_D < 12)
                if (this.L > 0) this.запятая = сигнал_D;
            this.индик_зпт[сигнал_D] = this.L > 0;
        }
        if ((this.микрокоманда >>> 12 & 4) > 0) гамма = ~this.T & 1;
        if ((this.микрокоманда >>> 12 & 2) > 0) гамма |= ~this.L & 1;
        if ((this.микрокоманда >>> 12 & 1) > 0) гамма |= this.L & 1;
        var сумма = альфа + бета + гамма;
        var сигма = сумма & 0xf;
        this.П = сумма >>> 4;
        if (this.МОД == 0 || (this.микротакт >>> 2) >= 36) {
            switch (this.микрокоманда >>> 15 & 7) {
                case 1: this.R[сигнал_I] = this.R[(сигнал_I + 3) % 42]; break;
                case 2: this.R[сигнал_I] = сигма; break;
                case 3: this.R[сигнал_I] = this.S; break;
                case 4: this.R[сигнал_I] = this.R[сигнал_I] | this.S | сигма; break;
                case 5: this.R[сигнал_I] = this.S | сигма; break;
                case 6: this.R[сигнал_I] = this.R[сигнал_I] | this.S; break;
                case 7: this.R[сигнал_I] = this.R[сигнал_I] | сигма; break;
            }
            if ((this.микрокоманда >>> 18 & 1) > 0) this.R[(сигнал_I + 41) % 42] = сигма;
            if ((this.микрокоманда >>> 19 & 1) > 0) this.R[(сигнал_I + 40) % 42] = сигма;
        }
        if ((this.микрокоманда >>> 21 & 1) > 0) this.L = this.П & 1;
        if ((this.микрокоманда >>> 20 & 1) > 0) this.M[сигнал_I] = this.S;
        switch (this.микрокоманда >>> 22 & 3) {
            case 1: this.S = this.S1; break;
            case 2: this.S = сигма; break;
            case 3: this.S = this.S1 | сигма; break;
        }
        switch (this.микрокоманда >>> 24 & 3) {
            case 1: this.S1 = сигма; break;
            case 2: this.S1 = this.S1; break;
            case 3: this.S1 = this.S1 | сигма; break;
        }
        var x, y, z;
        switch (this.микрокоманда >>> 26 & 3) {
            case 1:	this.ST[(сигнал_I + 2) % 42] = this.ST[(сигнал_I + 1) % 42];
                this.ST[(сигнал_I + 1) % 42] = this.ST[сигнал_I];
                this.ST[сигнал_I] = сигма;
                break;
            case 2:	x = this.ST[сигнал_I];
                this.ST[сигнал_I] = this.ST[(сигнал_I + 1) % 42];
                this.ST[(сигнал_I + 1) % 42] = this.ST[(сигнал_I + 2) % 42];
                this.ST[(сигнал_I + 2) % 42] = x;
                break;
            case 3:	x = this.ST[сигнал_I];
                y = this.ST[(сигнал_I + 1) % 42];
                z = this.ST[(сигнал_I + 2) % 42];
                this.ST[сигнал_I % 42] = сигма | y;
                this.ST[(сигнал_I + 1) % 42] = x | z;
                this.ST[(сигнал_I + 2) % 42] = y | x;
                break;
        }
        this.выход = this.M[сигнал_I] & 0xf;
        this.M[сигнал_I] = this.вход;
        this.микротакт += 4;
        if (this.микротакт > 167) this.микротакт = 0;
    }
}

function Такт() {
    ИК1302.вход = ИР2_2.выход;
    ИК1302.Такт();
    ИК1303.вход = ИК1302.выход;
    ИК1303.Такт();
    if (расширенный) {
        ИК1306.вход = ИК1303.выход;
        ИК1306.Такт();
        ИР2_1.вход = ИК1306.выход;
    }
    else
        ИР2_1.вход = ИК1303.выход;
    ИР2_1.Такт();
    ИР2_2.вход = ИР2_1.выход;
    ИР2_2.Такт();
    ИК1302.M[((ИК1302.микротакт >>> 2) + 41) % 42] = ИР2_2.выход;
}

var режим_счёта = false;

function Изменить_яркость(ярче) {
    if (ярче) var цвет = "#73FBDE";
    else var цвет = "#43CBAE";
    for (var сч = 0; сч < 12; сч++) document.getElementById("Знакоместо_"+сч).style.color = цвет;
}

var Символы_разрядов = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-", "L", "С", "Г", "Е", " "];

function Отобразить_индикатор() {
    if (режим_счёта != (ИК1302.запятая == 11)) {
        Изменить_яркость(режим_счёта);
        режим_счёта = !режим_счёта;
    }

    var str = ''
    for (сч = 0; сч < 12; сч++) {
        str = str + Символы_разрядов[Индикатор[сч]];
        //document.getElementById("Знакоместо_"+сч).value = Символы_разрядов[Индикатор[сч]];
        //document.getElementById("Знакоместо_"+сч).value += (Индик_зпт[сч] ? "," : " ");
    }
    console.log(str);
}

function Прочитать_число(микросхема, адрес) {
    var ссылка;
    switch (микросхема) {
        case 1: ссылка = ИР2_1.M; break;
        case 2: ссылка = ИР2_2.M; break;
        case 3: ссылка = ИК1302.M; break;
        case 4: ссылка = ИК1303.M; break;
        case 5: ссылка = ИК1306.M; break;
    }
    порядок = ссылка[адрес-3] * 10 + ссылка[адрес-6];
    if (ссылка[адрес] == 9) порядок = - (100 - порядок);
    var сч = 0;
    while (ссылка[адрес-33+сч*3] == 0) {
        if ((порядок == 7-сч) || (сч == 7)) break;
        сч++;
    }
    var цифры = [];
    while (сч < 8) {
        цифры.push(ссылка[адрес-33+сч*3]);
        сч++;
    }
    цифры.reverse();
    var мантисса = (ссылка[адрес-9] == 9) ? "-" : "";
    var зпт = false;
    for (сч = 0; сч < цифры.length; сч++) {
        мантисса += Символы_разрядов[цифры[сч]];
        if ( ((сч == 0) && ((порядок < 0) || (порядок > 7))) || (сч == порядок) ) {
            мантисса += ","; зпт = true;
        }
    }
    if (!зпт) мантисса += ",";
    var результат = мантисса;
    if ((порядок < 0) || (порядок > 7)) {
        for (сч = 0; сч < 12-мантисса.length; сч++)
            результат += " ";
        результат += порядок;
    }
    return результат;
}

var Адреса_страниц_памяти = [
    [1, 41], [1, 83], [1, 125], [1, 167], [1, 209], [1, 251], [2, 41], [2, 83], [2, 125], [2, 167], [2, 209], [2, 251], [3, 41], [4, 41], [5, 41]
];

var Перестановки_адресов_страниц_памяти = [
    [ 1, 2, 3, 4, 5, 14, 13, 12, 6, 7, 8, 9, 10, 11, 0 ],
    [ 10, 11, 6, 7, 2, 3, 4, 5, 0, 1, 14, 13, 12, 8, 9 ],
    [ 14, 13, 12, 10, 11, 6, 7, 8, 9, 4, 5, 0, 1, 2, 3 ]
];

var Адреса_стека = [
    [1, 34], [1, 76], [1, 118], [1, 160], [1, 202], [1, 244], [2, 34], [2, 76], [2, 118], [2, 160], [2, 202], [2, 244], [3, 34], [4, 34], [5, 34]
];

var Перестановки_адресов_стека = [
    [ 8, 9, 10, 11, 0 ],
    [ 14, 13, 12, 8, 9 ],
    [ 5, 0, 1, 2, 3 ]
];

var Адреса_возвратов = [28, 22, 16, 10, 4];

var Адрес_счётчика_команд = 34;

var Перестановки_адресов_страниц_памяти_ = [
    [ 1, 2, 3, 4, 5, 13, 12, 6, 7, 8, 9, 10, 11, 0 ],
    [ 3, 4, 5, 0, 1, 13, 12, 8, 9, 10, 11, 6, 7, 2 ],
    [ 5, 0, 1, 2, 3, 13, 12, 10, 11, 6, 7, 8, 9, 4 ]
];

var Перестановки_адресов_стека_ = [
    [ 8, 9, 10, 11, 0 ],
    [ 10, 11, 6, 7, 2 ],
    [ 6, 7, 8, 9, 4 ]
];

function Заполнить_поля(перестановка) {
    return;
    for (сч = 0; сч < (расширенный ? 15 : 14); сч++)
        if (расширенный) document.getElementById("Р"+сч).value =
            Прочитать_число(Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти[перестановка][сч]][0], Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти[перестановка][сч]][1]-8);
        else document.getElementById("Р"+сч).value =
            Прочитать_число(Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти_[перестановка][сч]][0], Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти_[перестановка][сч]][1]-8);
    for (сч = 0; сч < 5; сч++)
        if (расширенный) document.getElementById("С_"+сч).value =
            Прочитать_число(Адреса_стека[Перестановки_адресов_стека[перестановка][сч]][0], Адреса_стека[Перестановки_адресов_стека[перестановка][сч]][1]);
        else document.getElementById("С_"+сч).value =
            Прочитать_число(Адреса_стека[Перестановки_адресов_стека_[перестановка][сч]][0], Адреса_стека[Перестановки_адресов_стека_[перестановка][сч]][1]);
    document.getElementById("СК").value = Символы_разрядов[ИК1302.R[Адрес_счётчика_команд]] + Символы_разрядов[ИК1302.R[Адрес_счётчика_команд-3]];
    for (сч = 0; сч < 5; сч++)
        document.getElementById("В_"+сч).value = Символы_разрядов[ИК1302.R[Адреса_возвратов[сч]]] + Символы_разрядов[ИК1302.R[Адреса_возвратов[сч]-3]];
}

var исполнение, пауза = false;

function Шаг() {
    ИК1303.клав_y = 1;
    ИК1303.клав_x = Мера_угла;
    for (var сч = 1; сч <= 560; сч++) {
        for (var i = 0; i < 42; i++) Такт();
        if (ИК1302.обн_индик) {
            for (i = 0; i <= 8; i++) Индикатор[i] = ИК1302.R[(8 - i) * 3];
            for (i = 0; i <= 2; i++) Индикатор[i + 9] = ИК1302.R[(11 - i) * 3];
            for (i = 0; i <= 8; i++) Индик_зпт[i] = ИК1302.индик_зпт[9 - i];
            for (i = 0; i <= 2; i++) Индик_зпт[i + 9] = ИК1302.индик_зпт[12 - i];
            ИК1302.обн_индик = false;
        }
    }
    var обновить = false;
    for (сч = 0; сч <= 12; сч++) {
        if (Индик_ст[сч] != Индикатор[сч]) обновить = true;
        Индик_ст[сч] = Индикатор[сч];
    }
    if (обновить) Отобразить_индикатор();
    ИК1302.клав_x = 0;
    ИК1302.клав_y = 0;
    if (ИР2_1.микротакт == 84) Заполнить_поля(1);
}

function Нажатие_кнопки(x, y) {
    if ((typeof(ИК1302) != "undefined") && (ИК1302 !== null)) {
        ИК1302.клав_x = x;
        ИК1302.клав_y = y;
    }
    if (!пауза) Шаг();
}

function Включить() {
    ИР2_1 = new ИР2(), ИР2_2 = new ИР2();
    ИК1302 = new ИК13(), ИК1303 = new ИК13();
    if (расширенный) ИК1306 = new ИК13();
    Заполнить_ПЗУ();
    исполнение = setInterval(Шаг, 300);
    Шаг();
}

function Выключить() {
    clearInterval(исполнение);
    //for (var сч = 0; сч < 12; сч++)
        //document.getElementById("Знакоместо_" + сч).value = "";
        
    ИР2_1 = null, ИР2_2 = null;
    ИК1302 = null, ИК1303 = null, ИК1306 = null;
    Индикатор = [], Индик_ст = [], Индик_зпт = [];
    //for (сч = 0; сч < 15; сч++) document.getElementById("Р"+сч).value = "";
    //for (сч = 0; сч < 5; сч++) document.getElementById("С_"+сч).value = "";
    //for (сч = 0; сч < 5; сч++) document.getElementById("В_"+сч).value = "";
    //document.getElementById("СК").value = "";
    пауза = false;
    //document.getElementById("Пауза").value = "Стоп";
}

function Пауза() {
    if ((ИР2_1 === undefined) || (ИР2_1 == null)) return;
    if (пауза)  {
        пауза = false;
        document.getElementById("Пауза").value = "Стоп";
        исполнение = setInterval(Шаг, 300);
        Шаг();
    }
    else {
        clearInterval(исполнение);
        Заполнить_поля(ИР2_1.микротакт / 84);
        пауза = true;
        document.getElementById("Пауза").value = "Пуск";
    }
}

function Нажатие_клавиши(код) {
    if ((код >= 48) && (код <= 57)) Нажатие_кнопки(код-46, 1);
    else if ((код >= 96) && (код <= 105)) Нажатие_кнопки(код-94, 1);
    else
        switch (код) {
            case 13: case 38: case 32: Нажатие_кнопки(11, 8); break; // В^
            case 27: case 46: Нажатие_кнопки(10, 8); break; // Сx
            case 70: Нажатие_кнопки(11, 9); break; // F
            case 75: Нажатие_кнопки(10, 9); break; // K
            case 106: Нажатие_кнопки(4, 8); break; // *
            case 107: Нажатие_кнопки(2, 8); break; // +
            case 109: Нажатие_кнопки(3, 8); break; // -
            case 111: Нажатие_кнопки(5, 8); break; // /
            case 110: Нажатие_кнопки(7, 8); break; // ,
            case 37: Нажатие_кнопки(7, 9); break; // ШГ<-
            case 39: Нажатие_кнопки(9, 9); break; // ШГ->
            default: break;
        }
}

var мнемоники_команд = [
    [	0x15,
        ["10^x", "10x", "F10^x", "F10x"],
        0, 3, 2, [2, 3]
    ],
    [	0x54,
        ["НОП", "KНОП", "КНОП"],
        0, 1, 1, [1, 2]
    ],
    [	0x16,
        ["e^x", "ex", "Fe^x", "Fex"],
        0, 3, 2, [2, 3]
    ],
    [	0x17,
        ["lg", "Flg"],
        0, 3, 1, [1]
    ],
    [	0x18,
        ["ln", "Fln"],
        0, 3, 1, [1]
    ],
    [	0x30,
        ["ЧМ", "KЧМ", "КЧМ"],
        0, 3, 1, [1, 2]
    ],
    [	0x19,
        ["arcsin", "Farcsin"],
        0, 3, 1, [1]
    ],
    [	0x31,
        ["|x|", "K|x|", "К|x|"],
        0, 3, 1, [1, 2]
    ],
    [	0x1A,
        ["arccos", "Farccos"],
        0, 3, 1, [1]
    ],
    [	0x32,
        ["ЗН", "KЗН", "КЗН"],
        0, 3, 1, [1, 2]
    ],
    [	0x1B,
        ["arctg", "Farctg"],
        0, 3, 1, [1]
    ],
    [	0x33,
        ["ГМ", "KГМ", "КГМ"],
        0, 3, 1, [1, 2]
    ],
    [	0x1C,
        ["sin", "Fsin"],
        0, 3, 1, [1]
    ],
    [	0x34,
        ["[x]", "K[x]", "К[x]"],
        0, 3, 1, [1, 2]
    ],
    [	0x1D,
        ["cos", "Fcos"],
        0, 3, 1, [1]
    ],
    [	0x35,
        ["{x}", "(x)", "K{x}", "К{x}", "K(x)", "К(x)"],
        0, 3, 2, [2, 3, 4, 5]
    ],
    [	0x1E,
        ["tg", "Ftg"],
        0, 3, 1, [1]
    ],
    [	0x36,
        ["max", "Kmax", "Кmax"],
        0, 3, 1, [1, 2]
    ],
    [	0x10,
        ["+"],
        0, 3, 0, []
    ],
    [	0x11,
        ["-"],
        0, 3, 0, []
    ],
    [	0x12,
        ["*", "x", "х", "×", "⋅"],
        0, 3, 1, []
    ],
    [	0x13,
        ["/", ":", "÷"],
        0, 3, 1, []
    ],
    [	0x20,
        ["пи", "π", "Fпи", "Fπ"],
        0, 0, 2, [2, 3]
    ],
    [	0x26,
        ["МГ", "KМГ", "КМГ"],
        0, 3, 1, [1, 2]
    ],
    [	0x21,
        ["КвКор", "квкор", "корень", "√", "FКвКор", "Fквкор", "Fкорень", "F√"],
        0, 3, 4, [4, 5, 6, 7]
    ],
    [	0x22,
        ["x^2", "x2", "x²", "Fx^2", "Fx2", "Fx²"],
        0, 3, 3, [3, 4, 5]
    ],
    [	0x23,
        ["1/x", "F1/x"],
        0, 3, 1, [1]
    ],
    [	0x14,
        ["<->", "XY", "↔", "X↔Y"],
        0, 1, 0, []
    ],
    [	0x0E,
        ["^", "В^", "↑", "В↑"],
        0, 1, 1, []
    ],
    [	0x24,
        ["x^y", "xy", "Fx^y", "Fxy"],
        0, 3, 2, [2, 3]
    ],
    [	0x27,
        ["K-", "К-"],
        0, 0, 0, []
    ],
    [	0x28,
        ["Kx", "Кх", "K*", "К*"],
        0, 0, 0, []
    ],
    [	0x29,
        ["K/", "К/", "K:", "К:", "K÷", "К÷"],
        0, 0, 2, []
    ],
    [	0x2A,
        ["МЧ", "KМЧ", "КМЧ"],
        0, 3, 1, [1, 2]
    ],
    [	0x0F,
        ["Вx", "FВx"],
        0, 1, 1, [1]
    ],
    [	0x3B,
        ["СЧ", "KСЧ", "КСЧ"],
        0, 0, 1, [1, 2]
    ],
    [	0x0A,
        [",", "."],
        0, 0, 0, []
    ],
    [	0x0B,
        ["/-/", "+/-"],
        0, 0, 0, []
    ],
    [	0x0C,
        ["ВП"],
        0, 0, 0, []
    ],
    [	0x0D,
        ["Сx"],
        0, 1, 0, []
    ],
    [	0x25,
        ["->", "↻", "→", "F->", "F↻", "F→"],
        0, 1, 3, [3, 4, 5]
    ],
    [	0x37,
        ["/\\", "⋀", "K/\\", "К/\\", "K⋀", "К⋀"],
        0, 3, 2, [2, 3, 4, 5]
    ],
    [	0x38,
        ["\\/", "⋁", "K\\/", "К\\/", "K⋁", "К⋁"],
        0, 3, 2, [2, 3, 4, 5]
    ],
    [	0x39,
        ["(+)", "⊕", "K(+)", "К(+)", "K⊕", "К⊕"],
        0, 3, 2, [2, 3, 4, 5]
    ],
    [	0x3A,
        ["ИНВ", "KИНВ", "КИНВ"],
        0, 3, 1, [1, 2]
    ],
    [	0x52,
        ["В/О", "В/0"],
        0, 4, 0, []
    ],
    [	0x50,
        ["С/П"],
        0, 4, 0, []
    ],
    [	0x59,
        ["x>=0", "x≥0", "x≥0", "x⩾0", "Fx>=0", "Fx≥0", "Fx≥0", "Fx⩾0"],
        2, 4, 4, [4, 5, 6, 7]
    ],
    [	0x57,
        ["x#0", "x!=0", "x<>0", "x≠0", "Fx#0", "Fx!=0", "Fx<>0", "Fx≠0"],
        2, 4, 4, [4, 5, 6, 7]
    ],
    [	0x51,
        ["БП"],
        2, 4, 0, []
    ],
    [	0x53,
        ["ПП"],
        2, 4, 0, []
    ],
    [	0x58,
        ["L2", "FL2"],
        2, 4, 1, [1]
    ],
    [	0x5A,
        ["L3", "FL3"],
        2, 4, 1, [1]
    ],
    [	0x5C,
        ["x<0", "Fx<0"],
        2, 4, 1, [1]
    ],
    [	0x5E,
        ["x=0", "Fx=0"],
        2, 4, 1, [1]
    ],
    [	0x5D,
        ["L0", "FL0"],
        2, 4, 1, [1]
    ],
    [	0x5B,
        ["L1", "FL1"],
        2, 4, 1, [1]
    ],
    [	0x40,
        ["П", "XП"],
        1, 2, 0, []
    ],
    [	0x60,
        ["ИП", "ПX", "Пx"],
        1, 2, 0, []
    ],
    [	0x70,
        ["Kx#0", "Кx#0", "Kx!=0", "Кx!=0", "Kx<>0", "Кx<>0", "Kx≠0", "Кx≠0",],
        1, 4, 0, []
    ],
    [	0x80,
        ["KБП", "КБП"],
        1, 4, 0, []
    ],
    [	0x90,
        ["Kx>=0", "Кx>=0", "Kx≥0", "Кx≥0", "Kx⩾0", "Кx⩾0"],
        1, 4, 0, []
    ],
    [	0xA0,
        ["KПП", "КПП"],
        1, 4, 0, []
    ],
    [	0xB0,
        ["KП", "КП", "KXП", "КXП"],
        1, 2, 0, []
    ],
    [	0xC0,
        ["Kx<0", "Кx<0"],
        1, 4, 0, []
    ],
    [	0xD0,
        ["KИП", "КИП", "KПX", "КПX"],
        1, 2, 0, []
    ],
    [	0xE0,
        ["Kx=0", "Кx=0"],
        1, 4, 0, []
    ]
];

function Адрес_команды(номер, перестановка) {
    var целчасть = номер / 7 | 0;
    var остаток = номер % 7;
    if (расширенный) {
        if (остаток == 0) return Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти[перестановка][целчасть]];
        else return [Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти[перестановка][целчасть]][0], Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти[перестановка][целчасть]][1] - 42 + остаток * 6];
    }
    else {
        if (остаток == 0) return Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти_[перестановка][целчасть]];
        else return [Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти_[перестановка][целчасть]][0], Адреса_страниц_памяти[Перестановки_адресов_страниц_памяти_[перестановка][целчасть]][1] - 42 + остаток * 6];
    }
}

function Ввести_код() {
    var выключен = (ИР2_1 === undefined) || (ИР2_1 == null);
    if (выключен) {
        ИР2_1 = new ИР2(), ИР2_2 = new ИР2();
        ИК1302 = new ИК13(), ИК1303 = new ИК13();
        if (расширенный) ИК1306 = new ИК13();
        Заполнить_ПЗУ();
        Шаг();
    }
    else clearInterval(исполнение);
    function Записать_в_память(номер, код) {
        var ст = код / 16 | 0;
        var мл = код % 16;
        var адрес = Адрес_команды(номер, ИР2_1.микротакт / 84);
        switch (адрес[0]) {
            case 1: ИР2_1.M[адрес[1]] = ст; ИР2_1.M[адрес[1]-3] = мл; break;
            case 2: ИР2_2.M[адрес[1]] = ст; ИР2_2.M[адрес[1]-3] = мл; break;
            case 3: ИК1302.M[адрес[1]] = ст; ИК1302.M[адрес[1]-3] = мл; break;
            case 4: ИК1303.M[адрес[1]] = ст; ИК1303.M[адрес[1]-3] = мл; break;
            case 5: ИК1306.M[адрес[1]] = ст; ИК1306.M[адрес[1]-3] = мл; break;
        }
    }
    function Добавить_команду(команда, номер) {
        if ( (!isNaN(parseInt(команда[0], 10)) || (команда[0] == "A") || (команда[0] == "-")) && (!isNaN(parseInt(команда[1], 10)) && (команда[2] == ".")) ) {
            if ((команда[0] == "A") || (команда[0] == "-")) {
                if (parseInt(команда[1], 10) < 5) номер = 100 + parseInt(команда[1], 10);
            }
            else
                номер = parseInt(команда.slice(0, 2), 10);
            команда = команда.slice(3);
        }
        var индекс = -1;
        for (var сч = 0; сч < мнемоники_команд.length; сч++) {
            индекс = мнемоники_команд[сч][1].indexOf((мнемоники_команд[сч][2] == 1) ? команда.slice(0, -1) : команда);
            if (индекс != -1) {
                if (мнемоники_команд[сч][2] == 1)
                    Записать_в_память(номер, мнемоники_команд[сч][0]+parseInt(команда.slice(-1), 16));
                else
                    Записать_в_память(номер, мнемоники_команд[сч][0]);
                break;
            }
        }
        if (индекс == -1)
            Записать_в_память(номер, parseInt(команда, 16));
    }
    document.getElementById("Код").innerHTML = document.getElementById("Код").innerHTML.replace(/(<)(br|div|p)/g, " <$2");
    var команды = document.getElementById("Код").textContent.replace(/^\s+|\s+$/g, "").split(/\s+/).slice(0, расширенный ? 105 : 98);
    for (var сч = 0; сч < команды.length; сч++) Добавить_команду(команды[сч], сч);
    if (!выключен) for (var сч = команды.length; сч < (расширенный ? 105 : 98); сч++) Записать_в_память(сч, 0);
    исполнение = setInterval(Шаг, 300);
    if (выключен) document.getElementById("ВКЛ").checked = true;
}

function Прочитать_код() {
    document.getElementById("Код").innerHTML = "";
    if ((ИР2_1 === undefined) || (ИР2_1 == null)) {
        document.getElementById("Код").innerHTML = "<br />";
        return;
    }
    clearInterval(исполнение);
    var команды = [];
    var адрес, код, команда_с_адресом = false;
    var сч, сч_к;
    var группы_команд = [], наличия_префикса = [];
    for (сч = 0; сч < (расширенный ? 105 : 98); сч++) {
        адрес = Адрес_команды(сч, ИР2_1.микротакт / 84);
        switch (адрес[0]) {
            case 1: код = ИР2_1.M[адрес[1]] * 16 + ИР2_1.M[адрес[1]-3]; break;
            case 2: код = ИР2_2.M[адрес[1]] * 16 + ИР2_2.M[адрес[1]-3]; break;
            case 3: код = ИК1302.M[адрес[1]] * 16 + ИК1302.M[адрес[1]-3]; break;
            case 4: код = ИК1303.M[адрес[1]] * 16 + ИК1303.M[адрес[1]-3]; break;
            case 5: код = ИК1306.M[адрес[1]] * 16 + ИК1306.M[адрес[1]-3]; break;
        }
        команды[сч] = "";
        if (команда_с_адресом) {
            if ((код >= 0xA0) && (код < 0xA5)) команды[сч] += "." + (код % 0xA0).toString(16).toUpperCase();
            else {
                if (код < 10) команды[сч] += "0";
                команды[сч] += код.toString(16).toUpperCase();
                группы_команд[сч] = "адр";
                наличия_префикса[сч] = false;
            }
            команда_с_адресом = false;
        }
        else {
            for (сч_к = 0; сч_к < мнемоники_команд.length; сч_к++) {
                if (мнемоники_команд[сч_к][2] == 1) {
                    if ((((код / 0x10) | 0) == мнемоники_команд[сч_к][0] / 0x10) && (код % 0x10 < 0xF)) {
                        if (document.getElementById("Числовые_значения").checked)
                            команды[сч] += (код / 0x10 | 0).toString(16).toUpperCase() + (код % 0x10).toString(16).toUpperCase();
                        else
                        if (document.getElementById("Простой_код").checked)
                            команды[сч] += мнемоники_команд[сч_к][1][0] + (код % 0x10).toString(16).toUpperCase();
                        else
                            команды[сч] += мнемоники_команд[сч_к][1][мнемоники_команд[сч_к][4]] + (код % 0x10).toString(16).toUpperCase();
                        break;
                    }
                }
                else {
                    if (код == мнемоники_команд[сч_к][0]) {
                        if (document.getElementById("Числовые_значения").checked)
                            команды[сч] += (код / 0x10 | 0).toString(16).toUpperCase() + (код % 0x10).toString(16).toUpperCase();
                        else
                        if (document.getElementById("Простой_код").checked)
                            команды[сч] += мнемоники_команд[сч_к][1][0];
                        else
                            команды[сч] += мнемоники_команд[сч_к][1][мнемоники_команд[сч_к][4]];
                        break;
                    }
                }
            }
            if (сч_к == мнемоники_команд.length) {
                if (document.getElementById("Числовые_значения").checked)
                    команды[сч] += (код / 0x10 | 0).toString(16).toUpperCase() + (код % 0x10).toString(16).toUpperCase();
                else
                    команды[сч] += код.toString(16).toUpperCase();
                команда_с_адресом = false;
                группы_команд[сч] = 0;
                наличия_префикса[сч] = false;
            }
            else {
                команда_с_адресом = (мнемоники_команд[сч_к][2] == 2);
                группы_команд[сч] = мнемоники_команд[сч_к][3];
                наличия_префикса[сч] = мнемоники_команд[сч_к][5].indexOf(мнемоники_команд[сч_к][4]) != -1;
            }
        }
    }
    var ширины_столбцов = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    for (var доп_сч = 0; доп_сч < (расширенный ? 10 : 9); доп_сч++)
        for (сч = 0; сч < 10; сч++)
            if (команды[доп_сч * 10 + сч].length > ширины_столбцов[сч]) ширины_столбцов[сч] = команды[доп_сч * 10 + сч].length;
    for (сч = 0; сч < (расширенный ? 5 : 8); сч++)
        if (команды[(расширенный ? 100 : 90) + сч].length > ширины_столбцов[сч]) ширины_столбцов[сч] = команды[(расширенный ? 100 : 90) + сч].length;
    for (сч = 0; сч < (расширенный ? 105 : 98); сч++) {
        if (document.getElementById("Подсветка").checked) {
            if (!document.getElementById("Простой_код").checked)
                document.getElementById("Код").innerHTML +=
                    '<span class="подсв_ном">' + ((сч < 100) ? ((сч < 10) ? "0" + сч : сч) : "A" + (сч % 10)) + ".</span>";
            if (наличия_префикса[сч] && !document.getElementById("Числовые_значения").checked && !document.getElementById("Простой_код").checked)
                document.getElementById("Код").innerHTML +=
                    '<span class="подсв_' + группы_команд[сч] + '">' +
                    '<span class="подсв_преф">' + команды[сч][0] + "</span>" +
                    команды[сч].slice(1) + "</span>";
            else
                document.getElementById("Код").innerHTML += '<span class="подсв_' + группы_команд[сч] + '">' + команды[сч] + "</span>";
        }
        else {
            if (!document.getElementById("Простой_код").checked)
                document.getElementById("Код").innerHTML += ((сч < 100) ? ((сч < 10) ? "0" + сч : сч) : "A" + (сч % 10)) + ".";
            document.getElementById("Код").innerHTML += команды[сч];
        }
        if (сч % 10 == 9)
            document.getElementById("Код").innerHTML += "\n<br />";
        else
            for (доп_сч = 0; доп_сч <= ширины_столбцов[сч % 10] - команды[сч].length; доп_сч++)
                document.getElementById("Код").innerHTML += "&nbsp;";
    }
    if (!пауза) исполнение = setInterval(Шаг, 300);
}

function Прочитать_состояние() {
    if ((ИР2_1 === undefined) || (ИР2_1 == null)) return;
    clearInterval(исполнение);
    var состояние = "";
    состояние += Мера_угла.toString(16);
    var микросхемы = [ИР2_1, ИР2_2, ИК1302, ИК1303, ИК1306];
    var сч_1, сч_2;
    for (сч_1 = 0; сч_1 < 2; сч_1++) {
        for (сч_2 = 0; сч_2 < 252; сч_2++)
            состояние += микросхемы[сч_1].M[сч_2].toString(16);
        состояние += микросхемы[сч_1].вход.toString(16);
        состояние += микросхемы[сч_1].выход.toString(16);
        состояние += (микросхемы[сч_1].микротакт < 0x10) ? "0" + микросхемы[сч_1].микротакт.toString(16) : микросхемы[сч_1].микротакт.toString(16);
    }
    for (сч_1 = 2; сч_1 < (расширенный ? 5 : 4); сч_1++) {
        for (сч_2 = 0; сч_2 < 42; сч_2++)
            состояние += микросхемы[сч_1].M[сч_2].toString(16);
        for (сч_2 = 0; сч_2 < 42; сч_2++)
            состояние += микросхемы[сч_1].R[сч_2].toString(16);
        for (сч_2 = 0; сч_2 < 42; сч_2++)
            состояние += микросхемы[сч_1].ST[сч_2].toString(16);
        состояние += микросхемы[сч_1].S.toString(16);
        состояние += микросхемы[сч_1].S1.toString(16);
        состояние += микросхемы[сч_1].L.toString(16);
        состояние += микросхемы[сч_1].T.toString(16);
        состояние += микросхемы[сч_1].П.toString(16);
        состояние += (микросхемы[сч_1].микротакт < 0x10) ? "0" + микросхемы[сч_1].микротакт.toString(16) : микросхемы[сч_1].микротакт.toString(16);
        сч_2 = 7 - микросхемы[сч_1].микрокоманда.toString(16).length;
        while (сч_2 > 0) { состояние += "0"; сч_2--; }
        состояние += микросхемы[сч_1].микрокоманда.toString(16);
        состояние += микросхемы[сч_1].клав_x.toString(16);
        состояние += микросхемы[сч_1].клав_y.toString(16);
        состояние += микросхемы[сч_1].запятая.toString(16);
        состояние += микросхемы[сч_1].вход.toString(16);
        состояние += микросхемы[сч_1].выход.toString(16);
        состояние += (микросхемы[сч_1].АМК < 0x10) ? "0" + микросхемы[сч_1].АМК.toString(16) : микросхемы[сч_1].АМК.toString(16);
        состояние += (микросхемы[сч_1].АСП < 0x10) ? "0" + микросхемы[сч_1].АСП.toString(16) : микросхемы[сч_1].АСП.toString(16);
        состояние += (микросхемы[сч_1].АК < 0x10) ? "0" + микросхемы[сч_1].АК.toString(16) : микросхемы[сч_1].АК.toString(16);
        состояние += (микросхемы[сч_1].МОД < 0x10) ? "0" + микросхемы[сч_1].МОД.toString(16) : микросхемы[сч_1].МОД.toString(16);
        состояние += микросхемы[сч_1].обн_индик ? "1" : "0";
        for (сч_2 = 0; сч_2 < 14; сч_2++)
            состояние += микросхемы[сч_1].индик_зпт[сч_2] ? "1" : "0";
    }
    var Русский_алфавит = "АБВГҐДЕЄЁЖЗИІЇЙКЛМНОПРСТУЎФХЦЧШЩЪЫЬЭЮЯ";
    var вывод = "";
    сч_1 = 0;
    while (сч_1 < состояние.length) {
        сч_2 = 0;
        while ((сч_1 < состояние.length) && (состояние[сч_1] == "0")) { сч_2++; сч_1++; }
        if (сч_2 > 0) {
            while (сч_2 != 0) {
                вывод += Русский_алфавит[сч_2 % Русский_алфавит.length];
                сч_2 = сч_2 / Русский_алфавит.length | 0;
            }
        }
        else {
            вывод += состояние[сч_1];
            сч_1++;
        }
    }
    var окно = window.open("", "Состояние", "width=400px, height=150px");
    окно.document.body.innerHTML = '<center><textarea style="width: 350px; height: 125px;">' + вывод + "</textarea></center>";
    if (!пауза) исполнение = setInterval(Шаг, 300);
}

function Ввести_состояние() {
    var ввод = prompt("Введите сохранённое состояние:");
    var Русский_алфавит = "АБВГҐДЕЄЁЖЗИІЇЙКЛМНОПРСТУЎФХЦЧШЩЪЫЬЭЮЯ";
    var состояние = "";
    var сч_1 = 0, сч_2, число, количество_нулей;
    while (сч_1 < ввод.length) {
        число = "";
        количество_нулей = 0;
        while ((сч_1 < ввод.length) && (Русский_алфавит.indexOf(ввод[сч_1]) != -1)) { число += ввод[сч_1]; сч_1++; }
        if (число.length > 0) {
            for (сч_2 = 0; сч_2 < число.length; сч_2++) {
                количество_нулей += Русский_алфавит.indexOf(число[сч_2]) * Math.pow(Русский_алфавит.length, сч_2);
            }
            for (сч_2 = 0; сч_2 < количество_нулей; сч_2++)
                состояние += "0";
        }
        else {
            состояние += ввод[сч_1];
            сч_1++;
        }
    }
    Выключить();
    ИР2_1 = new ИР2(), ИР2_2 = new ИР2();
    ИК1302 = new ИК13(), ИК1303 = new ИК13(), ИК1306 = new ИК13();
    Заполнить_ПЗУ();
    Мера_угла = parseInt(состояние[0], 16);
    document.getElementById((Мера_угла == 10) ? "Радианы" : (Мера_угла == 11) ? "Градусы" : "Грады").checked = true;
    var микросхемы = [ИР2_1, ИР2_2, ИК1302, ИК1303, ИК1306];
    var сч_1, сч_2;
    for (сч_1 = 0; сч_1 < 2; сч_1++) {
        for (сч_2 = 0; сч_2 < 252; сч_2++)
            микросхемы[сч_1].M[сч_2] = parseInt(состояние[сч_2 + 1 + 256 * сч_1], 16);
        микросхемы[сч_1].вход = parseInt(состояние[253 + 256 * сч_1], 16);
        микросхемы[сч_1].выход = parseInt(состояние[254 + 256 * сч_1], 16);
        микросхемы[сч_1].микротакт = parseInt(состояние.substr(255 + 256 * сч_1, 2), 16);
    }
    for (сч_1 = 2; сч_1 < (расширенный ? 5 : 4); сч_1++) {
        for (сч_2 = 0; сч_2 < 42; сч_2++)
            микросхемы[сч_1].M[сч_2] = parseInt(состояние[сч_2 + 177 + 168 * сч_1], 16);
        for (сч_2 = 0; сч_2 < 42; сч_2++)
            микросхемы[сч_1].R[сч_2] = parseInt(состояние[сч_2 + 219 + 168 * сч_1], 16);
        for (сч_2 = 0; сч_2 < 42; сч_2++)
            микросхемы[сч_1].ST[сч_2] = parseInt(состояние[сч_2 + 261 + 168 * сч_1], 16);
        микросхемы[сч_1].S = parseInt(состояние[303 + 168 * сч_1], 16);
        микросхемы[сч_1].S1 = parseInt(состояние[304 + 168 * сч_1], 16);
        микросхемы[сч_1].L = parseInt(состояние[305 + 168 * сч_1], 16);
        микросхемы[сч_1].T = parseInt(состояние[306 + 168 * сч_1], 16);
        микросхемы[сч_1].П = parseInt(состояние[307 + 168 * сч_1], 16);
        микросхемы[сч_1].микротакт = parseInt(состояние.substr(308 + 168 * сч_1, 2), 16);
        микросхемы[сч_1].микрокоманда = parseInt(состояние.substr(310 + 168 * сч_1, 7), 16);
        микросхемы[сч_1].клав_x = parseInt(состояние[317 + 168 * сч_1], 16);
        микросхемы[сч_1].клав_y = parseInt(состояние[318 + 168 * сч_1], 16);
        микросхемы[сч_1].запятая = parseInt(состояние[319 + 168 * сч_1], 16);
        микросхемы[сч_1].вход = parseInt(состояние[320 + 168 * сч_1], 16);
        микросхемы[сч_1].выход = parseInt(состояние[321 + 168 * сч_1], 16);
        микросхемы[сч_1].АМК = parseInt(состояние.substr(322 + 168 * сч_1, 2), 16);
        микросхемы[сч_1].АСП = parseInt(состояние.substr(324 + 168 * сч_1, 2), 16);
        микросхемы[сч_1].АК = parseInt(состояние.substr(326 + 168 * сч_1, 2), 16);
        микросхемы[сч_1].МОД = parseInt(состояние.substr(328 + 168 * сч_1, 2), 16);
        микросхемы[сч_1].обн_индик = parseInt(состояние[330 + 168 * сч_1]) == 1;
        for (сч_2 = 0; сч_2 < 14; сч_2++)
            микросхемы[сч_1].индик_зпт[сч_2] = parseInt(состояние[сч_2 + 331 + 168 * сч_1]);
    }
    document.getElementById("ВКЛ").checked = true;
    исполнение = setInterval(Шаг, 300);
    Шаг();
}

var ввод_кода = false;
// document.getElementById("Код").onfocus = function (событие) { ввод_кода = true; }
// document.getElementById("Код").onblur = function (событие) { ввод_кода = false; }

// document.onkeydown = function (событие) {
//     if (!ввод_кода) {
//         var e = событие || window.event;
//         Нажатие_клавиши(e.charCode && e.keyCode == 0 ? e.charCode : e.keyCode);
//     }
// }

var Рычаги_барабана, Результатный_счётчик, Счётчик_оборотов, Положение_каретки, Звонок, Ползунки_установлены;

function Сдвинуть_каретку(вправо) {
    if (вправо) {
        if (Положение_каретки < 7) Положение_каретки++;
    }
    else {
        if (Положение_каретки > 0) Положение_каретки--;
    }
    document.getElementById("каретка").style.left = (-163 + 34 * Положение_каретки) + "px";
}

function Прокрутить_левый_барашек() {
    Счётчик_оборотов = [0, 0, 0, 0, 0, 0, 0, 0];
    for (var сч = 0; сч < 8; сч++)
        document.getElementById("счётчик_оборотов_"+сч).value = 0;
}

function Прокрутить_правый_барашек() {
    Результатный_счётчик = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    for (var сч = 0; сч < 13; сч++)
        document.getElementById("результатный_счётчик_"+сч).value = 0;
}

function Применить_гаситель() {
    Рычаги_барабана = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    for (var сч = 0; сч < 9; сч++)
        document.getElementById("рычаг_"+сч+"_0").checked = true;
}

function Прокрутить_результатный_счётчик(колесо, вперёд) {
    var перенос = (Результатный_счётчик[колесо] == (вперёд ? 9 : 0));
    Результатный_счётчик[колесо] = (Результатный_счётчик[колесо] + (вперёд ? 1 : 9)) % 10;
    if (перенос) {
        if (колесо == 12) Звонок = true;
        else Прокрутить_результатный_счётчик(колесо + 1, вперёд);
    }
    document.getElementById("результатный_счётчик_"+колесо).value = Результатный_счётчик[колесо];
}

function Прокрутить_счётчик_оборотов(колесо, вперёд) {
    var Цифры_колеса_оборотов = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1];
    Счётчик_оборотов[колесо] = вперёд ? ++Счётчик_оборотов[колесо] % 18 : (Счётчик_оборотов[колесо] + 17) % 18;
    document.getElementById("счётчик_оборотов_"+колесо).value = Цифры_колеса_оборотов[Счётчик_оборотов[колесо]];
}

function Прокрутить_ручку(вперёд) {
    var сч = 0, сч_пр;
    while ((сч < 9) && (сч < 13 - Положение_каретки)) {
        for (сч_пр = 0; сч_пр < Рычаги_барабана[сч]; сч_пр++)
            Прокрутить_результатный_счётчик(сч + Положение_каретки, вперёд);
        сч++;
    }
    Прокрутить_счётчик_оборотов(Положение_каретки, вперёд);
    document.getElementById("звонок").checked = Звонок;
    Звонок = false;
}

function Сдвинуть_ползунок(какой, куда) {
    switch (какой) {
        case 0:
            var ползунок = "позиция_верхнего_ползунка", ползунков = 1, позиций = 8;
            break;
        case 1:
            var ползунок = "позиция_левого_ползунка", ползунков = 1, позиций = 7;
            break;
        default:
            var ползунок = "позиция_правого_ползунка", ползунков = 2, позиций = 12;
    }
    if (Ползунки_установлены[какой]) {
        for (сч = 0; сч < позиций; сч++)
            document.getElementById(ползунок + "_" + сч).disabled = false;
        Ползунки_установлены[какой] = false;
    }
    else {
        var выделено_позиций = 0;
        for (var сч = 0; сч < позиций; сч++)
            if (document.getElementById(ползунок + "_" + сч).checked && (сч != куда)) выделено_позиций++;
        if (выделено_позиций + 1 >= ползунков) {
            Ползунки_установлены[какой] = true;
            for (сч = 0; сч < позиций; сч++)
                if (!document.getElementById(ползунок + "_" + сч).checked)
                    document.getElementById(ползунок + "_" + сч).disabled = true;
        }
    }
}

function Обнулить_арифмометр() {
    Рычаги_барабана = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    Результатный_счётчик = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    Счётчик_оборотов = [0, 0, 0, 0, 0, 0, 0, 0];
    Положение_каретки = 0;
    Звонок = false;
    Ползунки_установлены = [false, false, false];
}

var текущий_калькулятор = "", расширенный;
var общая_таблица = "";

function Выбрать_калькулятор(модель) {
    if (модель == "О программе") {
        var окно = window.open("", "О программе", "width=600; height=500;");
        окно.document.body.style.backgroundColor = "#181818";
        окно.document.body.style.color = "#F0F0F0";
        окно.document.head.innerHTML += "<style>a{color:#FFFFFF;font-weight:bold;text-decoration:none;} a:visited{color:#FFFFFF;text-decoration:none;} a:hover{color:#FFFFFF;text-decoration:underline;} a:active{color: #FFFFFF;text-decoration:none;}</style>";
        окно.document.body.innerHTML = "<center><b>Эмулятор русских кулькуляторов</b></center>";
        окно.document.body.innerHTML += "<p>&emsp;Программа в точности воспроизводит работу указанных в списке вычислительных устройств, а также предоставляет дополнительные возможности по управлению ими.</p>";
        окно.document.body.innerHTML += "<p>&emsp;Разработчики:<br />";
        окно.document.body.innerHTML += "<p>&emsp;–&ensp;<i>Общая разработка программы</i>: А. Русский.</p>";
        окно.document.body.innerHTML += "<p>&emsp;–&ensp;<i>Восстановление кода ПЗУ микросхем</i>: <a href='http://code.google.com/p/emu145/' target='_blank'>Феликс Лазарев</a>.</p>";
        окно.document.body.innerHTML += "<p>&emsp;–&ensp;<i>Схема эмуляции работы микросхем</i>: Феликс Лазарев, <a href='https://code.google.com/p/mk52/' target='_blank'>Andrey_emu</a>.</p>";
        окно.document.body.innerHTML += "<p>&emsp;–&ensp;<i>Модификация программы</i>: С. Тарасов.</p>";
        окно.document.body.innerHTML += "<p>&emsp;–&ensp;<i>Идеи, тестирование и т. п.</i>: <a href='http://arbinada.com/pmk/user/2' target='_blank'>Сергей Тарасов</a>, <a href='http://arbinada.com/pmk/user/1316' target='_blank'>cax</a>, <a href='http://arvi.livejournal.com/'>AtH</a>, <a href='http://arbinada.com/pmk/user/4' target='_blank'>Vitasam</a>, <a href='http://mk.semico.ru/' target='_blank'>SMB</a> и др.</p>";
        окно.document.body.innerHTML += "<p>&emsp;–&ensp;<i>Особая благодарность</i> создателям воспроизводимых в программе устройств и авторам книг и инструкций по работе с ними.</p>";
        окно.document.body.innerHTML += "<center><small>Выпуск от <i>03.03.2015 г.</i></small></center><br />";
        окно.document.body.innerHTML += "<center><i><small>© Триединая русская нация великороссов, украинцев и белорусов.</small></i></center>";
        return;
    }
    расширенный = (модель == "МК-61") ? true : false;
    if (текущий_калькулятор != "Феликс-М") {
        Выключить();
        //document.getElementById("Калькулятор").innerHTML = "";
    }
    else
        document.getElementById("Общая_таблица").innerHTML = общая_таблица;
    if (модель == "Феликс-М") {
        Обнулить_арифмометр();
        общая_таблица = document.getElementById("Общая_таблица").innerHTML;
        document.getElementById("Общая_таблица").innerHTML = "<tr><td>" + document.getElementById("Феликс-М").innerHTML + "</td></tr>";
    }
    else {
        //document.getElementById("Калькулятор").innerHTML = document.getElementById(модель).innerHTML;
        //document.getElementById("Последний_регистр").style.visibility = (расширенный ? "visible" : "hidden");
    }
    текущий_калькулятор = модель;
    //document.title = "Эмулятор " + модель;
}

const sleep = (waitTimeInMs) => new Promise(resolve => setTimeout(resolve, waitTimeInMs));

Выбрать_калькулятор("МК-61");
Включить();


function do1() {
    Нажатие_клавиши(49)
}

function do2() {
    Нажатие_клавиши(50)
}

setInterval(do1, 1000);
setInterval(do2, 1000);


//Нажатие_клавиши(50)
//Нажатие_клавиши(49)

// document.onkeydown = function (событие) {
//     if (!ввод_кода) {
//         var e = событие || window.event;
//         Нажатие_клавиши(e.charCode && e.keyCode == 0 ? e.charCode : e.keyCode);
//     }
// }